{
	"info": {
		"_postman_id": "61b1afc6-0840-4d61-b22c-5618672a7a16",
		"name": "TechEnablement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tenant Admin & Pre-requisite for File Exchange and Teams",
			"item": [
				{
					"name": "Tenant Admin",
					"item": [
						{
							"name": "Support User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"username\": \"{{UserName}}\",\n        \"password\": \"{{password}}\",\n        \"stayLoggedIn\": false,\n        \"actor\": \"eyJyZWZlcnJlciI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MC4wLjM5ODcuMTQ5IFNhZmFyaS81MzcuMzYifQ==\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/Login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tenant with Existing SalesForceId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var clientNameAssociateSF = pm.environment.get(\"tenantAssociateSFName\");",
											"",
											"pm.test(\"Verify status is 500 & -1 value found in response\", function () {",
											"    pm.response.to.have.status(500);",
											"    pm.expect(jsonData.status).to.eql(-1);",
											"});",
											"",
											"pm.test(\"Verify that payload is null when there is an exception\", function () {",
											"    pm.expect(jsonData.payload).to.eql(null);",
											"});",
											"",
											"pm.test(\"Verify the exception message contains client name with existing SalesforceId.\", function () {",
											"    pm.expect(jsonData.exception.Message).to.eql(\"Salesforce ID ‘ewfew12345’ is already associated with '\"+clientNameAssociateSF);   ",
											"    // Del_API_Auto_Tenant_12689(qa)- tenantAssociateSFName- autoclient20(e2e)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"AccountName\": \"Del_API_Auto_Tenant{{$timestamp}}\",\r\n\"AccountId\": \"ewfew12345\",\r\n\"CurrencyIsoCode\": \"USD\",\r\n\"OpportunityId\": \"0062M00000gzBGuQQA\",\r\n\"EmailDomains\": \"@360logica.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/AutoCreate/client/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"AutoCreate",
										"client",
										"create"
									]
								},
								"description": "Test Case Id: https://testims.testrail.io/index.php?/cases/view/245816\r\nAs a support user, I am not able to create Tenant with existing salesforceId.\r\n    -> Verify that status is 500 & -1 value \r\n    -> Verify status is 500 & -1 value found in response\r\n    -> Verify that tenant is not created with existing salesforceid\r\n    -> Verify the exception message contains client name with existing SalesforceId"
							},
							"response": []
						}
					]
				},
				{
					"name": "Pre-requisite for File Exchange and Teams",
					"item": [
						{
							"name": "Create Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"clientIdForTeams\", jsonData.payload.data[0].clientId);\r",
											"pm.environment.set(\"clientNameForTeams\", jsonData.payload.data[0].name);\r",
											"\r",
											"pm.test(\"Verify tenant is created successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"description\": \"Description Details to client {{timestamp}}\",\n        \"notes\": \"\",\n        \"totangoId\": null,\n        \"allowedIPAddresses\": null,\n        \"defaultTimezone\": \"Africa/Asmara\",\n        \"defaultCurrencyCodeId\": 4,\n        \"name\": \"Del_API_Auto_Tenant{{timestamp}}\",\n        \"urlSlugName\": \"{{$randomInt}}{{timestamp}}\",\n        \"domainsToAdd\": [],\n        \"productFeaturesToAdd\": [],\n        \"productsToAdd\": [\n            6,\n            1\n        ],\n        \"partnerEntityId\": null,\n        \"isTwoFactorRequired\": false,\n        \"salesForceAccountID\": \"SOOPOPOP{{$timestamp}}\",\n        \"ssoDefinitions\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/admin/client/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"admin",
										"client",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Non ACA user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that user is successfully associated to client\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"username\": \"{{nonAcaUserForTeams}}\",\n        \"productsToAdd\": [\n            1,\n            6\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/admin/clientuser/edit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"admin",
										"clientuser",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate ACA user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that user is successfully associated to client\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"username\": \"{{acaUserForTeams}}\",\n        \"productsToAdd\": [\n            1,\n            6\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/admin/clientuser/edit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"admin",
										"clientuser",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate second ACA user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that user is successfully associated to client\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"username\": \"{{secondAcaUserForTeams}}\",\n        \"productsToAdd\": [\n            1,\n            6\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/admin/clientuser/edit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"admin",
										"clientuser",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Non ACA User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"nonACAUserName\", jsonData.payload.data[0].basicInfo.username);",
											"pm.environment.set(\"nonACAUserId\", jsonData.payload.data[0].basicInfo.userId);",
											"pm.environment.set(\"nonACAUserdisplayName\", jsonData.payload.data[0].basicInfo.displayName);",
											"pm.environment.set(\"nonACAUserFirstName\", jsonData.payload.data[0].basicInfo.firstName);",
											"pm.environment.set(\"nonACAUserLastName\", jsonData.payload.data[0].basicInfo.lastName);",
											"",
											"var nonACAUserName = pm.environment.get(\"nonACAUserName\");",
											"var nonACAUserFirstName = pm.environment.get(\"nonACAUserFirstName\");",
											"var nonACAUserLastName = pm.environment.get(\"nonACAUserLastName\");",
											"",
											"pm.test(\"Verify Non ACA user is created successfully\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    pm.expect(jsonData.payload.data.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Verify that isACA Employee checkbox is not selected\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    pm.expect(jsonData.payload.data[0].basicInfo.isAcaEmployee).to.eql(false);",
											"});",
											"",
											"pm.test(\"Verify that created Non ACA user is Active by default\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    pm.expect(jsonData.payload.data[0].basicInfo.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Verify the added product name\", function () {",
											"    pm.expect(jsonData.payload.data[0].products[0].name).to.eql(\"ACA Services\");",
											"});",
											"",
											"pm.test(\"Check if the target is an array that includes the number specified\", function () {",
											"    pm.expect([4, 2, 3, 6]).to.be.an('array').that.includes(4, 2);",
											"});",
											"",
											"pm.test(\"Verify Json values as per given data\", function () {",
											"    pm.expect(jsonData.payload.data[0].basicInfo.firstName).is.to.equal(nonACAUserFirstName);",
											"    pm.expect(jsonData.payload.data[0].basicInfo.lastName).is.to.equal(nonACAUserLastName);",
											"    pm.expect(jsonData.payload.data[0].basicInfo.email).is.to.equal(pm.environment.get(\"emailId\"));",
											"    pm.expect(jsonData.payload.data[0].basicInfo.username).is.to.equal(nonACAUserName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"email\": \"{{emailId}}\",\n        \"username\": \"UserN{{$timestamp}}@360logica.com\",\n        \"firstName\": \"UserN\",\n        \"lastName\": \"{{$timestamp}}\",\n        \"displayName\": \"UserN {{$timestamp}}\",\n        \"startDate\": null,\n        \"division\": \"\",\n        \"isAcaEmployee\": false,\n        \"timezone\": \"Africa/Abidjan\",\n        \"currencyCodeId\": 1,\n        \"ssoId\": null,\n        \"lineManagerId\": null,\n        \"lineManager2Id\": null,\n        \"lineManager3Id\": null,\n        \"isSSOEnabled\": false,\n        \"groups\": null,\n        \"userSsoDefinitions\": [],\n        \"products\": [\n            6\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ACA User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"acaUserName\", jsonData.payload.data[0].basicInfo.username);",
											"pm.environment.set(\"acaUserId\", jsonData.payload.data[0].basicInfo.userId);",
											"pm.environment.set(\"ACAUserFirstName\", jsonData.payload.data[0].basicInfo.firstName);",
											"pm.environment.set(\"ACAUserLastName\", jsonData.payload.data[0].basicInfo.lastName);",
											"pm.environment.set(\"acaUserDisplayName\", jsonData.payload.data[0].basicInfo.displayName);",
											"",
											"var ACAUserName = pm.environment.get(\"acaUserName\");",
											"var ACAUserFirstName = pm.environment.get(\"ACAUserFirstName\");",
											"var ACAUserLastName = pm.environment.get(\"ACAUserLastName\");",
											"",
											"pm.test(\"Verify user is created successfully\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    pm.expect(jsonData.payload.data.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Verify that isACA Employee checkbox is selected\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    pm.expect(jsonData.payload.data[0].basicInfo.isAcaEmployee).to.eql(true);",
											"});",
											"",
											"pm.test(\"Verify that created ACA user is Active by default\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    pm.expect(jsonData.payload.data[0].basicInfo.isActive).to.eql(true);",
											"});",
											"",
											"pm.test(\"Verify the added product name\", function () {",
											"    pm.expect(jsonData.payload.data[0].products[0].name).to.eql(\"ACA Services\");",
											"});",
											"",
											"pm.test(\"Check if the target is an array that includes the number specified\", function () {",
											"    pm.expect([4, 2, 3, 6]).to.be.an('array').that.includes(4, 2);",
											"});",
											"",
											"pm.test(\"Verify Json values as per given data\", function () { ",
											"    pm.expect(jsonData.payload.data[0].basicInfo.firstName).is.to.equal(ACAUserFirstName); ",
											"    pm.expect(jsonData.payload.data[0].basicInfo.lastName).is.to.equal(ACAUserLastName); ",
											"    pm.expect(jsonData.payload.data[0].basicInfo.email).is.to.equal(pm.environment.get(\"emailId\"));",
											"    pm.expect(jsonData.payload.data[0].basicInfo.username).is.to.equal(ACAUserName); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"email\": \"{{emailId}}\",\n        \"username\": \"UserA{{$timestamp}}@360logica.com\",\n        \"firstName\": \"UserA\",\n        \"lastName\": \"{{$timestamp}}\",\n        \"displayName\": \"UserA {{$timestamp}}\",\n        \"startDate\": null,\n        \"division\": \"\",\n        \"isAcaEmployee\": true,\n        \"timezone\": \"Africa/Abidjan\",\n        \"currencyCodeId\": 1,\n        \"ssoId\": null,\n        \"lineManagerId\": null,\n        \"lineManager2Id\": null,\n        \"lineManager3Id\": null,\n        \"isSSOEnabled\": true,\n        \"groups\": null,\n        \"userSsoDefinitions\": [],\n        \"products\": [\n            6\n        ]        \n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Before Assign Any Role- Get User Security Roles For associated Non-ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify assignedUserSecurityRoles is empty\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(0);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify Manage Engagements & Client is present for availableUserSecurityRoles for non-aca users\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get available security roles & assigned security roles for non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify assignedUserSecurityRoles is empty\r\n    -> Verify Manage Engagements & Client is present for availableUserSecurityRoles for non-aca users."
					},
					"response": []
				},
				{
					"name": "Assign ACA Role to Associated Non-ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ACA Role is assigned to associated non-aca user successfully\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"    pm.expect(jsonData.payload.data).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{nonUserAcaId}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Client\",\n            \"Manage Engagements\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign ACA role to associated non-aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to associated non-aca user successfully"
					},
					"response": []
				},
				{
					"name": "Get User Secruity Roles After Assigning ACA Roles To Associated Non-ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify availableUserSecurityRoles are Manage Engagements & Client\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify both roles is present in assignedUserSecurityRoles after assigning both role\", function () {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get both roles in assigned security role for created non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\r\n    -> Verify availableUserSecurityRoles are Manage Engagements & Client\r\n    -> Verify both roles is present in assignedUserSecurityRoles after assigning both role"
					},
					"response": []
				},
				{
					"name": "Before Assign Any Role- Get User Security Roles For Associated ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify Manage Engagements & Consultant role is present for availableUserSecurityRoles for aca users\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assignedUserSecurityRoles is empty\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(0);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(undefined);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserIdTeams}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get user security roles for associated aca-user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify Manage Engagements & Consultant role is present for availableUserSecurityRoles for aca users\r\n    -> Verify assignedUserSecurityRoles is empty"
					},
					"response": []
				},
				{
					"name": "Assign ACA Role to Associated ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ACA Role is assigned to associated aca user successfully\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"    pm.expect(jsonData.payload.data).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{acaUserIdTeams}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Consultant\",\n            \"Manage Engagements\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign ACA role to associated aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to associated aca user successfully"
					},
					"response": []
				},
				{
					"name": "Get User Security Roles After Assign Roles For ACA-User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles are Manage Engagements & Consultant\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify both roles is present in assignedUserSecurityRoles after assigning both role\", function () {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserIdTeams}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get available security roles & assigned security roles for aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles are Manage Engagements & Consultant\r\n    -> Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\r\n    -> Verify both roles is present in assignedUserSecurityRoles after assigning both role"
					},
					"response": []
				},
				{
					"name": "Assign ACA Role to second ACA User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify ACA Role is assigned to associated aca user successfully\", function () {",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"    pm.expect(jsonData.payload.data).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{acaUserIdTeams2}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Consultant\",\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign ACA role to associated aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to associated aca user successfully"
					},
					"response": []
				},
				{
					"name": "ACA User Get User Security Roles After Assign Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify after assigning role to aca users- Consultant role is present in assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(1);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(\"Consultant\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserIdTeams2}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get correct assigned role after assigning role to aca-user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify after assigning role to aca users- Consultant role is present in assignedUserSecurityRoles"
					},
					"response": []
				},
				{
					"name": "Before Assign Any Role- Get User Security Roles For Created Non-ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify assignedUserSecurityRoles is empty\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(0);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify Manage Engagements & Client is present for availableUserSecurityRoles for non-aca users\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonACAUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get available security roles & assigned security roles for non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify assignedUserSecurityRoles is empty\r\n    -> Verify Manage Engagements & Client is present for availableUserSecurityRoles for non-aca users."
					},
					"response": []
				},
				{
					"name": "Assign ACA Role to Created Non ACA User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// setTimeout(function(){}, 40000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Verify ACA Role is assigned to created non-aca user successfully\", function () {",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"    pm.expect(jsonData.payload.data).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{nonACAUserId}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Client\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign ACA role to created non-aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to created non-aca user successfully"
					},
					"response": []
				},
				{
					"name": "After Assign ACA Roles- Get User Security Roles For Created Non-ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify after assigning role to non-aca users- Client role is present in assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(1);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(\"Client\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonACAUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get available security roles & assigned security roles for non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify after assigning role to non-aca users- Client role is present in assignedUserSecurityRoles"
					},
					"response": []
				},
				{
					"name": "Assign Both ACA Role to Created Non-ACA User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// setTimeout(function(){}, 40000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify ACA Role is assigned to created non-aca user successfully\", function () {",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"    pm.expect(jsonData.payload.data).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{nonACAUserId}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Client\",\n            \"Manage Engagements\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign both ACA role to created non-aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to created non-aca user successfully"
					},
					"response": []
				},
				{
					"name": "NON ACA User Get User Security Roles After Assign Both Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify availableUserSecurityRoles are Manage Engagements & Client\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify both roles is present in assignedUserSecurityRoles after assigning both role\", function () {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonACAUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get both roles in assigned security role for created non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\r\n    -> Verify availableUserSecurityRoles are Manage Engagements & Client\r\n    -> Verify both roles is present in assignedUserSecurityRoles after assigning both role"
					},
					"response": []
				},
				{
					"name": "Before Assign Any Role- Get User Security Roles For Created ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify Manage Engagements & Consultant role is present for availableUserSecurityRoles for aca users\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assignedUserSecurityRoles is empty\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(0);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(undefined);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get user security roles for created aca-user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify Manage Engagements & Consultant role is present for availableUserSecurityRoles for aca users\r\n    -> Verify assignedUserSecurityRoles is empty"
					},
					"response": []
				},
				{
					"name": "Reset User Security Roles For Created NON-ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify user security roles is reset\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"    pm.expect(jsonData.payload.data).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonACAUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"ResetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to reset the assigned security roles for non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify user security roles is reset"
					},
					"response": []
				},
				{
					"name": "Assign ACA Role to Non ACA User After Reset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// setTimeout(function(){}, 40000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Verify ACA Role is assigned to non-aca user successfully\", function () {",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"    pm.expect(jsonData.payload.data).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{nonACAUserId}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Client\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign ACA role to created non-aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to non-aca user successfully"
					},
					"response": []
				},
				{
					"name": "Get User Security Roles For Non-ACA User- Reset Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify after assigning role to non-aca users- Client role is present in assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(1);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(\"Client\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonACAUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get available security roles & assigned security roles for non-aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify after assigning role to non-aca users- Client role is present in assignedUserSecurityRoles"
					},
					"response": []
				},
				{
					"name": "Assign ACA Role to ACA User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// setTimeout(function(){}, 40000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Verify ACA Role is assigned to created aca user successfully\", function () {",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"    pm.expect(jsonData.payload.data).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{acaUserId}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Consultant\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign ACA role to created aca-user.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to created aca user successfully"
					},
					"response": []
				},
				{
					"name": "ACA User Get User Security Roles After Assign Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify after assigning role to aca users- Consultant role is present in assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(1);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(\"Consultant\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get correct assigned role after assigning role to aca-user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify after assigning role to aca users- Consultant role is present in assignedUserSecurityRoles"
					},
					"response": []
				},
				{
					"name": "Reset User Security Roles For Created ACA User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify user security roles is reset\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"    pm.expect(jsonData.payload.data).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"ResetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to reset the assigned security roles for user.\r\n    -> Verify that status code is 200\r\n    -> Verify user security roles is reset"
					},
					"response": []
				},
				{
					"name": "After Reset Security Roles- Get User Security Roles For Created ACA User Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles is 2\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-582 Verify Manage Engagements & Consultant role is present for availableUserSecurityRoles for aca users\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify assignedUserSecurityRoles is empty\", function() {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(0);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(undefined);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get user security roles for aca-user after reseting.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles is 2\r\n    -> Verify Manage Engagements & Consultant role is present for availableUserSecurityRoles for aca users\r\n    -> Verify assignedUserSecurityRoles is empty"
					},
					"response": []
				},
				{
					"name": "Assign Both ACA Role to ACA User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Verify ACA Role is assigned to aca user successfully\", function () {",
									"    pm.expect(jsonData.status).to.eql(1);",
									"    pm.expect(jsonData.exception).to.eql(null);",
									"    pm.expect(jsonData.payload.data).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payload\": {\n        \"userId\": {{acaUserId}},\n        \"clientPortalId\": {{clientIdForTeams}},\n        \"updatedSecurityGroups\": [\n            \"Consultant\",\n            \"Manage Engagements\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"UpdateUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to assign both ACA role to aca users.\r\n    -> Status code is 200\r\n    -> Verify ACA Role is assigned to aca user successfully"
					},
					"response": []
				},
				{
					"name": "Get User Security Roles After Assign Roles For ACA-User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Modified in- https://acaalpha.atlassian.net/browse/ACATE-589\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify availableUserSecurityRoles are Manage Engagements & Consultant\", function () {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
									"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Modified: ACATE-589 Verify both roles is present in assignedUserSecurityRoles after assigning both role\", function () {\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[1])\r",
									"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserId}},\r\n        \"clientPortalId\": {{clientIdForTeams}}\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"GetUserSecurityRoles"
							]
						},
						"description": "As a support user, I'm able to get available security roles & assigned security roles for aca user.\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response \r\n    -> Verify availableUserSecurityRoles are Manage Engagements & Consultant\r\n    -> Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\r\n    -> Verify both roles is present in assignedUserSecurityRoles after assigning both role"
					},
					"response": []
				},
				{
					"name": "ACA Division Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status, exception & data value\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of data response\", function () {\r",
									"    for(var i=0; i<jsonData.payload.data.length; i++) {\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('version');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('id');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('code');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('description');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('services');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('isDeleted');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('createdDate');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('createdByUser');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('lastModifiedDate');\r",
									"        pm.expect(jsonData.payload.data[i]).to.have.property('lastModifiedByUser');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{teUrl}}/api/te/v1/AcaDivision/read",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"AcaDivision",
								"read"
							]
						},
						"description": "As a support user, I'm able to get all available aca division.\r\n    -> Status code is 200\r\n    -> Verify keys of response\r\n    -> Verify status, exception & data value\r\n    -> Verify keys of data response"
					},
					"response": []
				},
				{
					"name": "Ensure Client Data After Module Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify keys of response\", function () {\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData).to.have.property('exception');\r",
									"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
									"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
									"    pm.expect(jsonData.payload).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status, exception & data value\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(1);\r",
									"    pm.expect(jsonData.exception).to.eql(null);\r",
									"    pm.expect(jsonData.payload.data).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"payload\": {\r\n    \"clientPortalId\": {{clientIdForTeams}}\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{teUrl}}/api/te/v1/Users/ensureclientdataaftermoduleassignment",
							"host": [
								"{{teUrl}}"
							],
							"path": [
								"api",
								"te",
								"v1",
								"Users",
								"ensureclientdataaftermoduleassignment"
							]
						},
						"description": "As a support user, I'm ensure client data after module assignment\r\n    -> Verify that status code is 200\r\n    -> Verify keys of response\r\n    -> Verify status, exception & data value"
					},
					"response": []
				},
				{
					"name": "User Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"id",
								"v1",
								"authentication",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Consultant User",
					"item": [
						{
							"name": "Login with Consultant User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg without review name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg without review name\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ReviewName\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Review Name' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n        \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n        \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg without review type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='Review'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg without review type\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ReviewType\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Review Type' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [\r\n                    8389\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a89801bb-175a-4223-a8ea-2cba4a18e24e\",\r\n                    \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [\r\n                    1913,\r\n                    5163\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [\r\n                    1910,\r\n                    8388\r\n                ],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [\r\n                    21\r\n                ],\r\n                \"groupIds\": [\r\n                    -1\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n        \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg without Review Period Date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='Review'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg without Review Period Date\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"AnnualInfo.ReviewEndDate\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Annual Info Review End Date' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[1].fieldName).to.eql(\"AnnualInfo.ReviewStartDate\");\r",
											"    pm.expect(jsonData.errors[1].message).to.eql(\"'Annual Info Review Start Date' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [\r\n                    8389\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a89801bb-175a-4223-a8ea-2cba4a18e24e\",\r\n                    \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [\r\n                    1913,\r\n                    5163\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [\r\n                    1910,\r\n                    8388\r\n                ],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [\r\n                    21\r\n                ],\r\n                \"groupIds\": [\r\n                    -1\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg if start date is greater than end date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='Review'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg if start date is greater than end date\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[3]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[3]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-01-01T00:00:00\",\r\n        \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n        \"reviewEndDate\": \"2021-01-23T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that i am not able to create ARC review with random value for role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='ECR'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that i am not able to create ARC review with random value for role\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();   \r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"EcommInfo.Roles[0].Role\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Role' has a range of values which does not include '19'.\");\r",
											"    pm.expect(jsonData.errors[1].fieldName).to.eql(\"EcommInfo.Roles[1].Role\");\r",
											"    pm.expect(jsonData.errors[1].message).to.eql(\"'Role' has a range of values which does not include '31'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 2,\r\n    \"ecommInfo\": {\r\n        \"reviewStartDate\": \"2021-06-02T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-21T00:00:00\",\r\n        \"Roles\": [\r\n            {\r\n                \"role\": 19,\r\n                \"userId\": {{acaConsultantUser1}}\r\n            },\r\n            {\r\n                \"role\": 31,\r\n                \"userId\": 1913\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userId\": 1913\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create reviews for U.S. Reg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a consultant user, I am able to create reviews\", function() {\r",
											"    let j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo.sections.length).to.eql(12);\r",
											"    for(j=0; j<jsonData.annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j].section).to.eql(section[j]);\r",
											"    }\r",
											"    pm.environment.set(\"usRevId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"usRevName\"));\r",
											"});\r",
											"// pm.test(\"As a consultant user, I am not able to create duplicate review.\", function () {\r",
											"//     pm.response.to.have.status(409);\r",
											"//     var jsonData = pm.response.json();\r",
											"//     pm.expect(jsonData).to.have.property(\"error\");\r",
											"//     pm.expect(jsonData.error).to.have.property(\"code\");\r",
											"//     pm.expect(jsonData.error).to.have.property(\"message\");\r",
											"//     pm.expect(jsonData.error.message).to.eql(\"Review Name Already Exist\");\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='UReview'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getMilliseconds()+\"\"+todaydate.getDate();\r",
											"\r",
											"pm.environment.set(\"usRevName\",reviewName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{usRevName}}\",\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-07-21T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-22T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}, {{acaUserIdTeams}}\r\n                ],\r\n                \"groupIds\": [\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}, {{acaUserIdTeams}}\r\n                ],\r\n                \"groupIds\": [\r\n                    // \"4dd4e935-c0bb-415b-91c3-af1c4c24c005\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ],\r\n                \"groupIds\": [\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-16T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create duplicate review.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am not able to create duplicate review.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.have.property(\"code\");\r",
											"    pm.expect(jsonData.error).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Review Name Already Exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"{{usRevName}}\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get review details by review id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    let j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewEndDate\");\r",
											"\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"sections\");\r",
											"        pm.expect(jsonData.annualInfo.sections.length).to.eql(12);\r",
											"    for(j=0; j<jsonData.annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j].section).to.eql(section[j]);\r",
											"    }\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"usRevName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"usRevId\"));\r",
											"    pm.expect(jsonData.id, \"AnnualComplianceReview\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{usRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{usRevId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get history of U.S. Reg review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get history of U.S. Reg review.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property(\"id\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityType\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityTypeIdentifier\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"eventTypeId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"summary\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"modifiedByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"clientPortalId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"isDeleted\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"key\");\r",
											"\r",
											"    pm.expect(jsonData[0].entityTypeIdentifier).to.eql(pm.environment.get(\"usRevId\"));\r",
											"    pm.expect(jsonData[0].entityType).to.eql(2);\r",
											"    pm.expect(jsonData[0].createdByUserName).to.eql(pm.environment.get(\"teamOwner\"));\r",
											"    pm.expect(jsonData[0].createdByUserId).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData[0].lastModifiedByUserId).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{usRevId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{usRevId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create reviews for ARC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='ECR'+\"\"+todaydate.getMilliseconds()+\"\"+todaydate.getDate()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getTime();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to create reviews for ARC\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"Analyst\", \"Supervisor\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"    pm.environment.set(\"revId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"revName\"));\r",
											"\r",
											"    // Implemented as ACATE-1146\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"approvedChannelsOfCommunication\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"archivalProviders\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"frequencyOfReview\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"numberOfSearchHours\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"deliverablePreferences\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"messageDeliveryPreference\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 2,\r\n    \"ecommInfo\": {\r\n        \"Roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}},\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-06-02T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-21T00:00:00\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get arc review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get arc review details by review id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"Analyst\", \"Supervisor\"];\r",
											"                pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"revName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"revId\"));\r",
											"    pm.expect(jsonData.reviewType, \"ECommReview\");\r",
											"    pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"\r",
											"    // Implemented as ACATE-1146\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"approvedChannelsOfCommunication\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"archivalProviders\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"frequencyOfReview\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"numberOfSearchHours\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"deliverablePreferences\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"messageDeliveryPreference\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get history of arc review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get history of U.S. Reg review.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property(\"id\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityType\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityTypeIdentifier\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"eventTypeId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"summary\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"modifiedByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"clientPortalId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"isDeleted\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"key\");\r",
											"\r",
											"    pm.expect(jsonData[0].entityTypeIdentifier).to.eql(pm.environment.get(\"revId\"));\r",
											"    pm.expect(jsonData[0].entityType).to.eql(2);\r",
											"    pm.expect(jsonData[0].createdByUserName).to.eql(pm.environment.get(\"teamOwner\"));\r",
											"    pm.expect(jsonData[0].createdByUserId).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData[0].lastModifiedByUserId).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Chrysalis review is not creating if provided more than one userid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Chrysalis review is not creating if provided more than one userid\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"message\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ChrysalisInfo.Roles[0].UserIds\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"UserIds must have one id\");\r",
											"    pm.expect(jsonData.errors[1].fieldName).to.eql(\"ChrysalisInfo.Roles[1].UserIds\");\r",
											"    pm.expect(jsonData.errors[1].message).to.eql(\"UserIds must have one id\");\r",
											"    pm.expect(jsonData.errors[2].fieldName).to.eql(\"ChrysalisInfo.Roles[2].UserIds\");\r",
											"    pm.expect(jsonData.errors[2].message).to.eql(\"UserIds must have one id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"NKII@2\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}},\r\n                    {{acaUserIdTeams2}},\r\n                    {{acaUserId}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}},\r\n                    {{acaUserId}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}},\r\n                    {{acaUserId}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n    }\r\n}\r\n// {\r\n//     \"reviewName\": \"{{chRevName}}\",\r\n//     \"reviewType\": 3,\r\n//     \"chrysalisInfo\": {\r\n//         \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n//         \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n//     }\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Chrysalis review is not creating if user id is not provided",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Chrysalis review is not creating if provided more than one userid\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[3]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[3]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[4]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[4]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[5]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[5]).to.have.property(\"message\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ChrysalisInfo.Roles[0].UserIds\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'User Ids' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[1].fieldName).to.eql(\"ChrysalisInfo.Roles[0].UserIds\");\r",
											"    pm.expect(jsonData.errors[1].message).to.eql(\"UserIds must have one id\");\r",
											"    pm.expect(jsonData.errors[2].fieldName).to.eql(\"ChrysalisInfo.Roles[1].UserIds\");\r",
											"    pm.expect(jsonData.errors[2].message).to.eql(\"'User Ids' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[3].fieldName).to.eql(\"ChrysalisInfo.Roles[1].UserIds\");\r",
											"    pm.expect(jsonData.errors[3].message).to.eql(\"UserIds must have one id\");\r",
											"    pm.expect(jsonData.errors[4].fieldName).to.eql(\"ChrysalisInfo.Roles[2].UserIds\");\r",
											"    pm.expect(jsonData.errors[4].message).to.eql(\"'User Ids' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[5].fieldName).to.eql(\"ChrysalisInfo.Roles[2].UserIds\");\r",
											"    pm.expect(jsonData.errors[5].message).to.eql(\"UserIds must have one id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"NKII@2\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": []\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": []\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": []\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that Chrysalis review is not creating if roles is not provided",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Chrysalis review is not creating if provided more than one userid\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ChrysalisInfo.Roles\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Chrysalis Info Roles' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"NKII@2\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create reviews for Chrysalis",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='CH9'+\"\"+todaydate.getTime()+\"\"+todaydate.getMilliseconds()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getDate();\r",
											"\r",
											"pm.environment.set(\"chRevName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to create reviews for Chrysalis\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).not.to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"    pm.environment.set(\"chRevId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[0].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[1].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[2].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{chRevName}}\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n    }\r\n}\r\n// {\r\n//     \"reviewName\": \"{{chRevName}}\",\r\n//     \"reviewType\": 3,\r\n//     \"chrysalisInfo\": {\r\n//         \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n//         \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n//     }\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get Chrysalis review details by id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get Chrysalis review details by id.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"        }\r",
											"        pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"        pm.expect(jsonData.id, pm.environment.get(\"chRevId\"));\r",
											"        pm.expect(jsonData.reviewType, \"ChrysalisReview\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[0].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[1].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[2].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{chRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{chRevId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get all reviews for tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Reviews Property Getting in Response\", function() {\r",
											"    let i,j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"    let roles = [\"AccountOwner\", \"Analyst\", \"Supervisor\"];\r",
											"    let chrysalisRoles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"    console.log(jsonData.value.length);\r",
											"    for(i=0; i<jsonData.value.length; i++) {\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"id\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"key\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"chrysalisInfo\");\r",
											"\r",
											"        // Verify Annual Info Review Property i.e., U.S. Reg\r",
											"        if(jsonData.value[i].annualInfo != null) {\r",
											"        pm.expect(jsonData.value[i].chrysalisInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"interviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo.sections.length).to.eql(12);\r",
											"        for(j=0; j<jsonData.value[i].annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j].section).to.eql(section[j]);\r",
											"        }\r",
											"        }\r",
											"\r",
											"        // Verify Ecom Info Review Property i.e., ARC\r",
											"        if(jsonData.value[i].ecommInfo != null) {\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].chrysalisInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.value[i].ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"        }\r",
											"\r",
											"        // Verify Chrysalis Review Property i.e., ARC\r",
											"        if(jsonData.value[i].chrysalisInfo != null) {\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].chrysalisInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.value[i].chrysalisInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.value[i].chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j].role).to.eql(chrysalisRoles[j]);\r",
											"        }}}\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to edit reviews for Chrysalis review",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='ChEdit'+\"\"+todaydate.getTime()+\"\"+todaydate.getMilliseconds()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getDate();\r",
											"\r",
											"pm.environment.set(\"chRevName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to edit reviews for Chrysalis review\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).not.to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"interviewDates\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"        \r",
											"        pm.expect(jsonData.chrysalisInfo.interviewDates.length).to.eql(6);\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"    pm.environment.set(\"chRevId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[0].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[1].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[2].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"{{chRevName}}\",\r\n    // \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-17T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-23T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that updated changes are getting for chrysallis review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that updated changes are getting for chrysallis review\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"        }\r",
											"        pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"        pm.expect(jsonData.id, pm.environment.get(\"chRevId\"));\r",
											"        pm.expect(jsonData.reviewType, \"ChrysalisReview\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[0].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[1].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[2].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{chRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{chRevId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Support User",
					"item": [
						{
							"name": "Login with Support User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{UserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg without review name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg without review name\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ReviewName\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Review Name' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n        \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n        \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg without review type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='Review'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg without review type\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"ReviewType\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Review Type' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [\r\n                    8389\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a89801bb-175a-4223-a8ea-2cba4a18e24e\",\r\n                    \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [\r\n                    1913,\r\n                    5163\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [\r\n                    1910,\r\n                    8388\r\n                ],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [\r\n                    21\r\n                ],\r\n                \"groupIds\": [\r\n                    -1\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n        \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg without Review Period Date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='Review'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg without Review Period Date\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"AnnualInfo.ReviewEndDate\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Annual Info Review End Date' must not be empty.\");\r",
											"    pm.expect(jsonData.errors[1].fieldName).to.eql(\"AnnualInfo.ReviewStartDate\");\r",
											"    pm.expect(jsonData.errors[1].message).to.eql(\"'Annual Info Review Start Date' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [\r\n                    8389\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a89801bb-175a-4223-a8ea-2cba4a18e24e\",\r\n                    \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [\r\n                    1913,\r\n                    5163\r\n                ],\r\n                \"groupIds\": [\r\n                    \"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [\r\n                    1910,\r\n                    8388\r\n                ],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [\r\n                    21\r\n                ],\r\n                \"groupIds\": [\r\n                    -1\r\n                ]\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that I am not able create U.S. Reg if start date is greater than end date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='Review'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that I am not able create U.S. Reg if start date is greater than end date\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[2]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[3]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[3]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 1,\r\n    \"annualInfo\": {\r\n        \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n        \"interviewEndDate\": \"2021-01-01T00:00:00\",\r\n        \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n        \"reviewEndDate\": \"2021-01-23T00:00:00\",\r\n        \"sections\": [\r\n            {\r\n                \"section\": 1,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 2,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 3,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 4,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 5,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 6,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 7,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 8,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 9,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 10,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 11,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            },\r\n            {\r\n                \"section\": 12,\r\n                \"userIds\": [],\r\n                \"groupIds\": []\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that i am not able to create ARC review with random value for role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='ECR'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that i am not able to create ARC review with random value for role\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();   \r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"    pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.errors[0].fieldName).to.eql(\"EcommInfo.Roles[0].Role\");\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'Role' has a range of values which does not include '19'.\");\r",
											"    pm.expect(jsonData.errors[1].fieldName).to.eql(\"EcommInfo.Roles[1].Role\");\r",
											"    pm.expect(jsonData.errors[1].message).to.eql(\"'Role' has a range of values which does not include '31'.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 2,\r\n    \"ecommInfo\": {\r\n        \"reviewStartDate\": \"2021-06-02T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-21T00:00:00\",\r\n        \"Roles\": [\r\n            {\r\n                \"role\": 19,\r\n                \"userId\": {{acaConsultantUser1}}\r\n            },\r\n            {\r\n                \"role\": 31,\r\n                \"userId\": 1913\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userId\": 1913\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create reviews for U.S. Reg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to create reviews\", function() {\r",
											"    let j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo.sections.length).to.eql(12);\r",
											"    for(j=0; j<jsonData.annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j].section).to.eql(section[j]);\r",
											"    }\r",
											"    pm.environment.set(\"usRevId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"usRevName\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='UReview2'+\"\"+todaydate.getMilliseconds()+\"\"+todaydate.getTime()+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"usRevName\",reviewName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"{{usRevName}}\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create duplicate review.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am not able to create duplicate review.\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.have.property(\"code\");\r",
											"    pm.expect(jsonData.error).to.have.property(\"message\");\r",
											"    pm.expect(jsonData.error.message).to.eql(\"Review Name Already Exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"{{usRevName}}\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to get review details by review id\", function() {\r",
											"    let j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewEndDate\");\r",
											"\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"sections\");\r",
											"        pm.expect(jsonData.annualInfo.sections.length).to.eql(12);\r",
											"    for(j=0; j<jsonData.annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j].section).to.eql(section[j]);\r",
											"    }\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"usRevName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"usRevId\"));\r",
											"    pm.expect(jsonData.id, \"AnnualComplianceReview\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{usRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{usRevId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get history of U.S. Reg review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get history of U.S. Reg review.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property(\"id\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityType\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityTypeIdentifier\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"eventTypeId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"summary\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"modifiedByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"clientPortalId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"isDeleted\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"key\");\r",
											"\r",
											"    pm.expect(jsonData[0].entityTypeIdentifier).to.eql(pm.environment.get(\"usRevId\"));\r",
											"    pm.expect(jsonData[0].entityType).to.eql(2);\r",
											"    pm.expect(jsonData[0].createdByUserName).to.eql(\"Jordan Schwartz\");\r",
											"    pm.expect(jsonData[0].createdByUserId).to.eql(422);\r",
											"    pm.expect(jsonData[0].lastModifiedByUserId).to.eql(422);\r",
											"    pm.expect(jsonData[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{usRevId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{usRevId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create reviews for ARC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='ECR2'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getDay()+\"\"+todaydate.getTime();\r",
											"\r",
											"pm.environment.set(\"revName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to create reviews for ARC\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"Analyst\", \"Supervisor\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"    pm.environment.set(\"revId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"revName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{revName}}\",\r\n    \"reviewType\": 2,\r\n    \"ecommInfo\": {\r\n        \"Roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-06-02T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-21T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get arc review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get arc review details by review id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"Analyst\", \"Supervisor\"];\r",
											"                pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"revName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"revId\"));\r",
											"    pm.expect(jsonData.reviewType, \"ECommReview\");\r",
											"    pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"\r",
											"    // Implemented as ACATE-1146\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"approvedChannelsOfCommunication\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"archivalProviders\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"frequencyOfReview\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"numberOfSearchHours\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"deliverablePreferences\");\r",
											"    pm.expect(jsonData.ecommInfo).to.have.property(\"messageDeliveryPreference\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get history of arc review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get history of arc review\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property(\"id\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityType\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"entityTypeIdentifier\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"eventTypeId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"summary\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"modifiedByUserName\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"createdByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedDate\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"lastModifiedByUserId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"clientPortalId\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"isDeleted\");\r",
											"    pm.expect(jsonData[0]).to.have.property(\"key\");\r",
											"\r",
											"    pm.expect(jsonData[0].entityTypeIdentifier).to.eql(pm.environment.get(\"revId\"));\r",
											"    pm.expect(jsonData[0].entityType).to.eql(2);\r",
											"    pm.expect(jsonData[0].createdByUserName).to.eql(\"Jordan Schwartz\");\r",
											"    pm.expect(jsonData[0].createdByUserId).to.eql(422);\r",
											"    pm.expect(jsonData[0].lastModifiedByUserId).to.eql(422);\r",
											"    pm.expect(jsonData[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create reviews for Chrysalis",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='CHR1'+\"\"+todaydate.getHours()+\"\"+todaydate.getTime()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getDay();\r",
											"\r",
											"pm.environment.set(\"chRevName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to create reviews for Chrysalis\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).not.to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"    pm.environment.set(\"chRevId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{chRevName}}\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get Chrysalis review details by id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get Chrysalis review details by id.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"        }\r",
											"        pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"        pm.expect(jsonData.id, pm.environment.get(\"chRevId\"));\r",
											"        pm.expect(jsonData.reviewType, \"ChrysalisReview\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{chRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{chRevId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get all reviews for tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to get all reviews for tenant\", function() {\r",
											"    let i,j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"    let roles = [\"AccountOwner\", \"Analyst\", \"Supervisor\"];\r",
											"    for(i=0; i<jsonData.value.length; i++) {\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"id\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"key\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.value[i]).to.have.property(\"ecommInfo\");\r",
											"\r",
											"        // Verify Annual Info Review Property i.e., U.S. Reg\r",
											"        if(jsonData.value[i].annualInfo != null) {\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.have.property(\"interviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].annualInfo.sections.length).to.eql(12);\r",
											"        for(j=0; j<jsonData.value[i].annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.value[i].annualInfo.sections[j].section).to.eql(section[j]);\r",
											"        }\r",
											"        }\r",
											"\r",
											"        // Verify Ecom Info Review Property i.e., ARC\r",
											"        if(jsonData.value[i].ecommInfo != null) {\r",
											"        pm.expect(jsonData.value[i].annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.value[i].ecommInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.value[i].ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.value[i].ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"        }\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to edit reviews for Chrysalis",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var reviewName='ChEdit'+\"\"+todaydate.getTime()+\"\"+todaydate.getMilliseconds()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getDate();\r",
											"\r",
											"pm.environment.set(\"chRevName\",reviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to edit reviews for Chrysalis\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).not.to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"interviewDates\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"        \r",
											"        pm.expect(jsonData.chrysalisInfo.interviewDates.length).to.eql(6);\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"    pm.environment.set(\"chRevId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[0].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[1].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.chrysalisInfo.roles[2].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"{{chRevName}}\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-19T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-21T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that updated changes are getting for chrysallis review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that updated changes are getting for chrysallis review\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"TestingSupervisor\", \"TestingAnalyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewTypeDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"roles\");\r",
											"        pm.expect(jsonData.chrysalisInfo.roles.length).to.eql(3);\r",
											"        for(j=0; j<jsonData.chrysalisInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.chrysalisInfo.roles[j].role).to.eql(roles[j]);\r",
											"        }\r",
											"        pm.expect(jsonData.reviewName, pm.environment.get(\"chRevName\"));\r",
											"        pm.expect(jsonData.id, pm.environment.get(\"chRevId\"));\r",
											"        pm.expect(jsonData.reviewType, \"ChrysalisReview\");\r",
											"        pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"        pm.expect(jsonData.ecommInfo).to.eql(null);\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[0].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[1].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"        pm.expect(jsonData.chrysalisInfo.roles[2].userIds[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{chRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{chRevId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Client User",
					"item": [
						{
							"name": "Login with Client User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 Forbidden for create review API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 Forbidden for create review API\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"77\",\r\n    \"reviewType\": 1,\r\n    \"reviewStartDate\": \"\",\r\n    \"reviewEndDate\": \"\",\r\n    \"interviewStartDate\": \"\",\r\n    \"interviewEndDate\": \"\",\r\n    \"sections\": [\r\n        {\r\n            \"section\": 1,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 2,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 3,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 4,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 5,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 6,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 7,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 8,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 9,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 10,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 11,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 12,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 Forbidden for get all review API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 Forbidden for get all review API\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 Forbidden for get review details API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 Forbidden for get review details API\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{usRevId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{usRevId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 Forbidden for get history api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get history of arc review\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 Forbidden for edit chrysalis",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 Forbidden for edit chrysalis\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-19T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-21T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Findings",
			"item": [
				{
					"name": "Consultant User",
					"item": [
						{
							"name": "Login with Consultant User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create annual compliance review with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Annual compliance review has been created successfully\", function() {\r",
											"    pm.environment.set(\"acReviewId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"acReviewName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var acReviewName='ACReview'+\"\"+todaydate.getHours()+\"-\"+todaydate.getMilliseconds()+\"\"+todaydate.getDate();\r",
											"\r",
											"pm.environment.set(\"acReviewName\",acReviewName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"{{acReviewName}}\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create finding for annual compliance reviews with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a consultant user, I am able to create finding for annual complince review\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"section\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"issue\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"recommendation\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"directoryId\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.section).to.have.property(\"section\");\r",
											"        pm.expect(jsonData.section).to.have.property(\"userIds\");\r",
											"        pm.expect(jsonData.section).to.have.property(\"groupIds\");\r",
											"    pm.environment.set(\"acReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var todaydate=new Date();\r",
											"// var acReviewName='ACReview'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"// pm.environment.set(\"acReviewName\",acReviewName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": 7,\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for reviews with wrong review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"12345\",\r\n    \"AnnualInfo\": {\r\n    \"Section\": 7,\r\n    \"Issue\": \"Third-Party File-Hosting Services\",\r\n    \"Recommendation\": \"new test recommendation\",\r\n    \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for annual compliance review with alphabetic value in section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I am not able to create finding for annual compliance review with alphabetic value in section\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": \"randomsection\",\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for annual compliance review with wrong numeric value in section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I am not able to create finding for annual compliance review with wrong numeric value in section\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": 200,\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for annual compliance review with null value in required input fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I see error message if Issue input field is empty\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[0].message).to.eql(\"'Annual Info Issue' must not be empty.\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error message if Section input field is empty\", function() {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[1].message).to.eql(\"'Annual Info Section' must not be empty.\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error message if Risk input field is empty\", function() {\r",
											"        pm.expect(jsonData.errors[2]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[2]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[2].message).to.eql(\"'Annual Info Risk Level' must not be empty.\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error message if Recommendation input field is empty\", function() {\r",
											"        pm.expect(jsonData.errors[3]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[3]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[3].message).to.eql(\"'Annual Info Recommendation' must not be empty.\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        //\"Section\": null,\r\n        \"Issue\": \"\",\r\n        \"Recommendation\": \"\",\r\n        \"RiskLevel\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for annual compliance reviews with wrong risk level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I am not able to create finding for annual compliance review with wrong numeric value in section\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": 7,\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"10\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get compliance review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a consultant user, I am able to get review details by review id\", function() {\r",
											"    let j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewEndDate\");\r",
											"\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"sections\");\r",
											"        pm.expect(jsonData.annualInfo.sections.length).to.eql(12);\r",
											"    for(j=0; j<jsonData.annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j].section).to.eql(section[j]);\r",
											"    }\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"usRevName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"usRevId\"));\r",
											"    pm.expect(jsonData.id, \"AnnualComplianceReview\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{acReviewId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{acReviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create ecomm review with valid details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var ecReviewName='ECReview-'+todaydate.getDate()+todaydate.getHours()+\"-\"+todaydate.getMilliseconds();\r",
											"\r",
											"pm.environment.set(\"ecReviewName\",ecReviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I am able to create E-Comm review\", function() {\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"ecReviewName\"));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"ecReviewId\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{ecReviewName}}\",\r\n    \"reviewType\": 2,\r\n    \"ecommInfo\": {\r\n        \"Roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": []\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": []\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": []\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-09T00:00:00\",\r\n        \"reviewEndDate\": \"2021-12-31T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create finding for e-comm review with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a consultant user, I am able to create finding for ecomm review\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskCategory\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"notes\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messageDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"employee\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"outsideParties\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryId\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryIdEcomm\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallSummary\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"    pm.environment.set(\"ecReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": 15,\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"2021-07-08T18:30:00.000Z\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for e-comm review with random value in risk category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": \"randomrisk\",\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"2021-07-08T18:30:00.000Z\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for ecomm review with wrong numeric value in risk category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": 500,\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"2021-07-08T18:30:00.000Z\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for ecomm review with wrong message date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": 10,\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"abcd\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for ecomm review with null value in all inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": null,\r\n        \"Notes\": null,\r\n        \"MessageDate\": null\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get arc review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get arc review details by review id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"Supervisor\", \"Analyst\"];\r",
											"                pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"revName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"revId\"));\r",
											"    pm.expect(jsonData.reviewType, \"ECommReview\");\r",
											"    pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{ecReviewId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{ecReviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get details of newly created finding for ecomm review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see status 200 OK for get data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I am able to get details of newly created finding for ecomm review\", function() {\r",
											"    // let j;\r",
											"    // let jsonData = pm.response.json();\r",
											"    // let roles = [\"AccountOwner\", \"Supervisor\", \"Analyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskCategory\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"notes\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messageDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"employee\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"outsideParties\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryId\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryIdEcomm\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallSummary\");\r",
											"\r",
											"    pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"    pm.expect(jsonData.chrysalisInfo).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"section\");\r",
											"    pm.expect(jsonData.section).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings/{{ecReviewFindingId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings",
										"{{ecReviewFindingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create chrysalis review with valid details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisReviewName='ChRw-'+todaydate.getDate()+\"-\"+todaydate.getMilliseconds()+\"\"+todaydate.getHours();\r",
											"\r",
											"pm.environment.set(\"chrysalisReviewName\",chrysalisReviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I am able to create E-Comm review\", function() {\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"chrysalisReviewName\"));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"chrysalisReviewId\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{chrysalisReviewName}}\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2022-07-22T00:00:00\"\r\n    }\r\n}\r\n// {\r\n//     \"reviewName\": \"{{chRevName}}\",\r\n//     \"reviewType\": 3,\r\n//     \"chrysalisInfo\": {\r\n//         \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n//         \"reviewEndDate\": \"2021-07-22T00:00:00\"\r\n//     }\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create finding for chrysalis review with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a consultant user, I am able to create finding for ecomm review\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"category\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"findingRecommendation\"); \r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"directoryId\");\r",
											"        \r",
											"    pm.environment.set(\"chrysalisReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"{{chrysalisFindingName}}\",\r\n        \"Category\": 7,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for chrysalis review without finding name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for chrysalis review without finding name\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[0].message).to.eql(\"'Chrysalis Info Finding Name' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"//pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"\",\r\n        \"Category\": 7,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for chrysalis review with beyond limit finding name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for chrysalis review with beyond limit finding name\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[0].message).to.contain(\"The length of 'Chrysalis Info Finding Name' must be 100 characters or fewer\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"//pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"A very very long chrysalis finding name with more than one hundred alphanumeric characters to validate maximum characters limit\",\r\n        \"Category\": 7,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am not able to create finding for chrysalis review with invalid category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As consultant user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for chrysalis review with wrong category\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"//pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"{{chrysalisFindingName}}\",\r\n        \"Category\": 500,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get finding details of chrysalis review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and reason OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a consultant user, I am able to get finding details of chrysalis review\", function() {\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"id\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"key\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"category\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"findingRecommendation\"); \r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"directoryId\");\r",
											"        \r",
											"    //pm.environment.set(\"chrysalisReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings?$filter=ReviewId eq '{{chrysalisReviewId}}'",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									],
									"query": [
										{
											"key": "$filter",
											"value": "ReviewId eq '{{chrysalisReviewId}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Support User",
					"item": [
						{
							"name": "Login with Support User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{UserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create annual compliance review with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Annual compliance review has been created successfully\", function() {\r",
											"    pm.environment.set(\"acReviewId\",jsonData.id);\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"acReviewName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var acReviewName='ACRew2v'+\"\"+todaydate.getHours()+\"-\"+todaydate.getMinutes()+\"-\"+todaydate.getSeconds()+\"-\"+todaydate.getMilliseconds();\r",
											"\r",
											"pm.environment.set(\"acReviewName\",acReviewName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"{{acReviewName}}\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-07-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-05-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-23T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create finding for annual compliance reviews with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to create finding for annual complince review\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"section\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"issue\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"recommendation\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"directoryId\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.section).to.have.property(\"section\");\r",
											"        pm.expect(jsonData.section).to.have.property(\"userIds\");\r",
											"        pm.expect(jsonData.section).to.have.property(\"groupIds\");\r",
											"    pm.environment.set(\"acReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var todaydate=new Date();\r",
											"// var acReviewName='ACReview'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"// pm.environment.set(\"acReviewName\",acReviewName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": 7,\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for reviews with wrong review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"12345\",\r\n    \"AnnualInfo\": {\r\n    \"Section\": 7,\r\n    \"Issue\": \"Third-Party File-Hosting Services\",\r\n    \"Recommendation\": \"new test recommendation\",\r\n    \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for annual compliance review with alphabetic value in section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I am not able to create finding for annual compliance review with alphabetic value in section\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": \"randomsection\",\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for annual compliance review with wrong numeric value in section",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I am not able to create finding for annual compliance review with wrong numeric value in section\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": 200,\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"3\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for annual compliance review with null value in required input fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I see error message if Issue input field is empty\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[0].message).to.eql(\"'Annual Info Issue' must not be empty.\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I see error message if Section input field is empty\", function() {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[1]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[1].message).to.eql(\"'Annual Info Section' must not be empty.\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I see error message if Risk input field is empty\", function() {\r",
											"        pm.expect(jsonData.errors[2]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[2]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[2].message).to.eql(\"'Annual Info Risk Level' must not be empty.\");\r",
											"        \r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I see error message if Recommendation input field is empty\", function() {\r",
											"        pm.expect(jsonData.errors[3]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[3]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[3].message).to.eql(\"'Annual Info Recommendation' must not be empty.\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        //\"Section\": null,\r\n        \"Issue\": \"\",\r\n        \"Recommendation\": \"\",\r\n        \"RiskLevel\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for annual compliance reviews with wrong risk level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 and reason Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I am not able to create finding for annual compliance review with wrong numeric value in section\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{acReviewId}}\",\r\n    \"AnnualInfo\": {\r\n        \"Section\": 7,\r\n        \"Issue\": \"Test issue for the finding of annual complicance review\",\r\n        \"Recommendation\": \"new test recommendation\",\r\n        \"RiskLevel\": \"10\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get compliance review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to get review details by review id\", function() {\r",
											"    let j;\r",
											"    let section = [\"PortfolioManagement\", \"ProxyVoting\", \"TradingCodeofEthicsAndInsiderTrading\", \"FeesAndExpenses\", \"RegulatoryFilingsAndDisclosures\", \"SafeguardingClientAssets\", \"BooksAndRecords\", \"MarketingAndTheUseOfSolicitors\", \"ValuationAndPricing\", \"PrivacyAndSafeguardingOfInformationAndCybersecurityAndIdentityTheftPrevention\", \"BusinessContinuityPlanning\", \"ComplianceProgram\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewStartDate\");\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"interviewEndDate\");\r",
											"\r",
											"        pm.expect(jsonData.annualInfo).to.have.property(\"sections\");\r",
											"        pm.expect(jsonData.annualInfo.sections.length).to.eql(12);\r",
											"    for(j=0; j<jsonData.annualInfo.sections.length; j++) {\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"section\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j]).to.have.property(\"groupIds\");\r",
											"            pm.expect(jsonData.annualInfo.sections[j].section).to.eql(section[j]);\r",
											"    }\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"usRevName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"usRevId\"));\r",
											"    pm.expect(jsonData.id, \"AnnualComplianceReview\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{acReviewId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{acReviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create ecomm review with valid details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var ecReviewName='E2Z'+\"-\"+todaydate.getMinutes()+\"-\"+todaydate.getSeconds()+\"-\"+todaydate.getMilliseconds()+\"\"+todaydate.getHours();\r",
											"\r",
											"pm.environment.set(\"ecReviewName\",ecReviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I am able to create E-Comm review\", function() {\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"ecReviewName\"));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"ecReviewId\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{ecReviewName}}\",\r\n    \"reviewType\": 2,\r\n    \"ecommInfo\": {\r\n        \"Roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": []\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": []\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": []\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-09T00:00:00\",\r\n        \"reviewEndDate\": \"2021-12-31T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create finding for e-comm review with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to create finding for ecomm review\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskCategory\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"notes\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messageDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"employee\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"outsideParties\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryId\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryIdEcomm\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallSummary\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"    pm.environment.set(\"ecReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": 15,\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"2021-07-08T18:30:00.000Z\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for e-comm review with random value in risk category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": \"randomrisk\",\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"2021-07-08T18:30:00.000Z\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for ecomm review with wrong numeric value in risk category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": 500,\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"2021-07-08T18:30:00.000Z\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for ecomm review with wrong message date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": 10,\r\n        \"Notes\": \"test note\",\r\n        \"MessageDate\": \"abcd\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for ecomm review with null value in all inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a consultant user, I see error in response on creating finding for ecomm review with random risk\", function() {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{ecReviewId}}\",\r\n    \"EcommInfo\": {\r\n        \"RiskCategory\": null,\r\n        \"Notes\": null,\r\n        \"MessageDate\": null\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get arc review details by review id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get arc review details by review id\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    let j;\r",
											"    let jsonData = pm.response.json();\r",
											"    let roles = [\"AccountOwner\", \"Supervisor\", \"Analyst\"];\r",
											"                pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewName\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewType\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewPeriod\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewStartDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"reviewEndDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"dateSearchEnded\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishVolumeTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"nonEnglishContractedWork\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"searchResults\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"linesScanned\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messagesRead\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"socialMediaTesting\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"roles\");\r",
											"\r",
											"        pm.expect(jsonData.ecommInfo.roles.length).to.eql(3);\r",
											"    for(j=0; j<jsonData.ecommInfo.roles.length; j++) {\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"role\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j]).to.have.property(\"userIds\");\r",
											"            pm.expect(jsonData.ecommInfo.roles[j].role).to.eql(roles[j]);\r",
											"    }\r",
											"\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"revName\"));\r",
											"    pm.expect(jsonData.id, pm.environment.get(\"revId\"));\r",
											"    pm.expect(jsonData.reviewType, \"ECommReview\");\r",
											"    pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{ecReviewId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{ecReviewId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get details of newly created finding for ecomm review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see status 200 OK for get data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I am able to get details of newly created finding for ecomm review\", function() {\r",
											"    // let j;\r",
											"    // let jsonData = pm.response.json();\r",
											"    // let roles = [\"AccountOwner\", \"Supervisor\", \"Analyst\"];\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskCategory\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"notes\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"messageDate\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"employee\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"outsideParties\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryId\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"directoryIdEcomm\");\r",
											"        pm.expect(jsonData.ecommInfo).to.have.property(\"exitCallSummary\");\r",
											"\r",
											"    pm.expect(jsonData.annualInfo).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"    pm.expect(jsonData.chrysalisInfo).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"section\");\r",
											"    pm.expect(jsonData.section).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings/{{ecReviewFindingId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings",
										"{{ecReviewFindingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create chrysalis review with valid details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisReviewName='chrysalisReview'+\"-\"+todaydate.getMinutes()+\"-\"+todaydate.getSeconds()+\"-\"+todaydate.getMilliseconds()+\"\"+todaydate.getHours();\r",
											"\r",
											"pm.environment.set(\"chrysalisReviewName\",chrysalisReviewName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I am able to create E-Comm review\", function() {\r",
											"    pm.expect(jsonData.reviewName, pm.environment.get(\"chrysalisReviewName\"));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"chrysalisReviewId\",jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reviewName\": \"{{chrysalisReviewName}}\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-14T00:00:00\",\r\n        \"reviewEndDate\": \"2022-07-22T00:00:00\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create finding for chrysalis review with valid details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"As a support user, I am able to create finding for ecomm review\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"        pm.expect(jsonData).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData).to.have.property(\"key\");\r",
											"        pm.expect(jsonData).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"category\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"findingRecommendation\"); \r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.chrysalisInfo).to.have.property(\"directoryId\");\r",
											"        \r",
											"    pm.environment.set(\"chrysalisReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"{{chrysalisFindingName}}\",\r\n        \"Category\": 7,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for chrysalis review without finding name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I see error in response on creating finding for chrysalis review without finding name\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[0].message).to.eql(\"'Chrysalis Info Finding Name' must not be empty.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"//pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"\",\r\n        \"Category\": 7,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for chrysalis review with beyond limit finding name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I see error in response on creating finding for chrysalis review with beyond limit finding name\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"        pm.expect(jsonData.errors[0].message).to.contain(\"The length of 'Chrysalis Info Finding Name' must be 100 characters or fewer\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"//pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"A very very long chrysalis finding name with more than one hundred alphanumeric characters to validate maximum characters limit\",\r\n        \"Category\": 7,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am not able to create finding for chrysalis review with invalid category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As support user I see bad request on creating finding for ecomm review with random risk\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"As a support user, I see error in response on creating finding for chrysalis review with wrong category\", function() {\r",
											"        pm.expect(jsonData).to.have.property(\"errors\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"fieldName\");\r",
											"        pm.expect(jsonData.errors[0]).to.have.property(\"message\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var chrysalisFindingName='Chrysalis_Finding'+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"//pm.environment.set(\"chrysalisFindingName\",chrysalisFindingName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ReviewId\": \"{{chrysalisReviewId}}\",\r\n    \"ChrysalisInfo\": {\r\n        \"FindingName\": \"{{chrysalisFindingName}}\",\r\n        \"Category\": 500,\r\n        \"FindingRecommendation\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get finding details of chrysalis review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and reason OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"As a support user, I am able to get finding details of chrysalis review\", function() {\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"id\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"reviewId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"findingsEnumDescriptions\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"issueTypeDescription\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"sectionDescription\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"riskDescription\");\r",
											"        pm.expect(jsonData.value[0].findingsEnumDescriptions).to.have.property(\"categoryDescription\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"createdByUserId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"createdDate\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"lastModifiedByUserId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"lastModifiedDate\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"key\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"isDeleted\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"createdBy\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"lastModifiedBy\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"annualInfo\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"ecommInfo\");\r",
											"        pm.expect(jsonData.value[0]).to.have.property(\"chrysalisInfo\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"findingName\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"category\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"findingRecommendation\"); \r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"issueType\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"riskLevel\");\r",
											"        pm.expect(jsonData.value[0].chrysalisInfo).to.have.property(\"directoryId\");\r",
											"        \r",
											"    //pm.environment.set(\"chrysalisReviewFindingId\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/findings?$filter=ReviewId eq '{{chrysalisReviewId}}'",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"findings"
									],
									"query": [
										{
											"key": "$filter",
											"value": "ReviewId eq '{{chrysalisReviewId}}'"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Engagement Service",
			"item": [
				{
					"name": "Support User",
					"item": [
						{
							"name": "Support User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set(\"currentDate\", moment().format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"username\": \"{{UserName}}\",\n        \"password\": \"{{password}}\",\n        \"stayLoggedIn\": false,\n        \"actor\": \"eyJyZWZlcnJlciI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MC4wLjM5ODcuMTQ5IFNhZmFyaS81MzcuMzYifQ==\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/Login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, Verify that I'm getting tenant name, engagement name & engagement role for a user.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, Verify that I'm getting tenant name, engagement name & engagement role for a user.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.text();\r",
											"    pm.expect(jsonData).to.contain('Tenant Name');\r",
											"    pm.expect(jsonData).to.contain('Engagement Name');\r",
											"    pm.expect(jsonData).to.contain('Engagement Role');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Navigation Using TE Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"let teDomain = pm.environment.get(\"teUrl\");\r",
											"let i;\r",
											"let acaNav = 'My ACA Services';\r",
											"let subMenuTitle = [\"My Engagements\", \"File Exchange\", \"Client Profile/Settings\", \"Template Generator\", \"Review Workspace\"];\r",
											"let subMenuUrl = [\"/portal/engagement\", \"/portal/engagement/exchange\", \"/portal/clientprofile/list\", \"/portal/report/list\", \"/portal/reviews/list\"];\r",
											"\r",
											"pm.test(\"Verify navigation menu for TE Url.\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('icon');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('title');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('url');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('domain');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('children');\r",
											"    pm.expect(jsonData.payload.data.children.length).to.eql(5);\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.children.length; i++) {\r",
											"        pm.expect(jsonData.payload.data.children[i]).to.have.property('title');\r",
											"        pm.expect(jsonData.payload.data.children[i]).to.have.property('url');\r",
											"        pm.expect(jsonData.payload.data.children[i]).to.have.property('domain');\r",
											"        \r",
											"        pm.expect(jsonData.payload.data.children[i].title).to.eql(subMenuTitle[i]);\r",
											"        pm.expect(jsonData.payload.data.children[i].url).to.eql(subMenuUrl[i]);\r",
											"        pm.expect(jsonData.payload.data.children[i].domain).to.eql(teDomain);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Navigation",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Navigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Engagement- not associated consultant user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(jsonData.status).to.eql(-1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the exception message\", function () {\r",
											"    pm.expect(jsonData.exception.Message).to.eql(\"Lead Consultant is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"SO{{$randomInt}}\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"acaLeadUsersToAdd\": [\n            {{userIdNotAssClient}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": []\n    }\n}"
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, I am unable to create engagement with consultant lead user id which is not associated with client/tenant."
							},
							"response": []
						},
						{
							"name": "Create Engagement With SFID containing special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"SO-1232\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"services\": [\n            5\n        ],\n        \"acaLeadUsersToAdd\": [\n            {{acaUserIdTeams}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, Verify that engagement is not creating if salesforce account id contains special character."
							},
							"response": []
						},
						{
							"name": "Create Engagement With Wrong Client Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that status value is -1\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(-1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": 1321,\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"SO1232\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"services\": [\n            5\n        ],\n        \"acaLeadUsersToAdd\": [\n            {{acaUserIdTeams}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, Verify that engagement is not created with invalid client id."
							},
							"response": []
						},
						{
							"name": "Create Engagement With SFID Length greater than18",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"1SO1234567891234569\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"services\": [\n            5\n        ],\n        \"acaLeadUsersToAdd\": [\n            {{acaUserIdTeams}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, Verify that engagement is not creating with salesforce account id having length greater than 18."
							},
							"response": []
						},
						{
							"name": "Verify Engagement Not Created With Inactive Tenant Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Status is -1\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(-1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"clientId\": {{inActiveTenantId}},\r\n        \"name\": \"Del_API_{{$timestamp}}\",\r\n        \"notes\": null,\r\n        \"salesforceOpportunityId\": \"SO{{$randomInt}}\",\r\n        \"deltekProjectId\": null,\r\n        \"isPrivileged\": false,\r\n        \"division\": 1,\r\n        \"acaLeadUsersToAdd\": [\r\n            \"{{acaUserId}}\"\r\n        ],\r\n        \"acaConsultantUsersToAdd\": [\"{{acaConsultantUser1}}\", \"{{acaConsultantUser2}}\"],\r\n        \"clientLeadUsersToAdd\": [\r\n            \"{{nonACAUserId}}\"\r\n        ],\r\n        \"clientUsersToAdd\": [\"{{clientUser1}}\", \"{{clientUser2}}\"]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, Verify that engagement is not creating with inactivate tenant/client id."
							},
							"response": []
						},
						{
							"name": "Get users of a Client while creating Engagements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var consultantLeadName = pm.environment.get(\"acaUserDisplayName\");\r",
											"var clientLeadName = pm.environment.get(\"nonACAUserdisplayName\");\r",
											"var clientUserId = parseInt(pm.environment.get(\"nonACAUserId\"));\r",
											"var consultantUserId = parseInt(pm.environment.get(\"acaUserId\"));\r",
											"\r",
											"pm.environment.set(\"otherClientUser\", jsonData.payload.data[1].userId);\r",
											"\r",
											"var clientUserIndex = jsonData.payload.data.map(\r",
											"    function (data) {\r",
											"        return data.userId}).indexOf(clientUserId);\r",
											"\r",
											"var consultantUserIndex = jsonData.payload.data.map(\r",
											"    function (data) {\r",
											"        return data.userId}).indexOf(consultantUserId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('userId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('displayName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('email');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('firstName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('lastName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('isAcaEmployee');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Client and Consultant users after selecting client while creating engagement\", function() {\r",
											"    pm.expect(jsonData.payload.data.length).to.eql(5);\r",
											"    pm.expect(jsonData.payload.data[clientUserIndex].userId).to.eql(clientUserId);\r",
											"    pm.expect(jsonData.payload.data[clientUserIndex].displayName).to.eql(clientLeadName);\r",
											"    pm.expect(jsonData.payload.data[consultantUserIndex].userId).to.eql(consultantUserId);\r",
											"    pm.expect(jsonData.payload.data[consultantUserIndex].displayName).to.eql(consultantLeadName);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"clientId\": {{clientIdForTeams}}\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/users/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"users",
										"read"
									]
								},
								"description": "As a support user, Get all users (Assigned ACA roles user) which can be use for creating engagement."
							},
							"response": []
						},
						{
							"name": "Create Engagement for Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"pm.environment.set('engagementName', jsonData.payload.data[0].name);\r",
											"var clientId = parseInt(pm.environment.get(\"clientIdForTeams\"));\r",
											"var engagementName = pm.environment.get(\"engagementName\");\r",
											"var engSalesForceId = pm.environment.get(\"salesforceOpportunityId\");\r",
											"var deltekId = pm.environment.get(\"deltekId\");\r",
											"var notes = pm.environment.get(\"engNotes\");\r",
											"\r",
											"pm.test(\"Verify client id for created engagement & set engagement id\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].clientId).to.eql(clientId);\r",
											"    pm.environment.set(\"engagementId\", jsonData.payload.data[0].id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json values as per given data\", function () { \r",
											"    pm.expect(jsonData.payload.data[0].name).is.to.equal(engagementName); \r",
											"    pm.expect(jsonData.payload.data[0].salesforceOpportunityId).is.to.equal(engSalesForceId);\r",
											"    pm.expect(jsonData.payload.data[0].notes).is.to.equal(notes);\r",
											"    pm.expect(jsonData.payload.data[0].deltekProjectId).is.to.equal(deltekId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify isPrivileged value is false\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].isPrivileged).is.to.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var sfID='TEAMS'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getSeconds();\r",
											"var deltekId='Deltek Project Teams Id Demo Test'+todaydate.getDate()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"var engNotes='Engagement Notes Id Demo Test'+todaydate.getDate()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set('salesforceOpportunityId', sfID);\r",
											"pm.environment.set('deltekId', deltekId);\r",
											"pm.environment.set('engNotes', deltekId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"notes\": \"{{engNotes}}\",\n        \"salesforceOpportunityId\": \"{{salesforceOpportunityId}}\",\n        \"deltekProjectId\": \"{{deltekId}}\",\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"services\": [\n            5\n        ],\n        \"acaLeadUsersToAdd\": [\n            {{acaUserIdTeams}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, I am able to create engagement for teams with valid aca consultant users."
							},
							"response": []
						},
						{
							"name": "Get Engagement For Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var engId = parseInt(pm.environment.get(\"engagementId\"));\r",
											"var clientId = Number(pm.environment.get(\"clientIdForTeams\"));\r",
											"var engIndex = jsonData.payload.data.map(\r",
											"    function (data) {\r",
											"        return data.id\r",
											"    }).indexOf(engId);\r",
											"\r",
											"if(jsonData.payload.data[engIndex].teamsInfo.teamsId === null) {\r",
											"    setTimeout(() => {}, 20000);\r",
											"    postman.setNextRequest(\"Get Engagement For Teams\");\r",
											"} else {\r",
											"    pm.environment.set(\"rootDirectoryId\", jsonData.payload.data[engIndex].aca.division.directoryId);\r",
											"    pm.environment.set(\"teamsId\", jsonData.payload.data[engIndex].teamsInfo.teamsId);\r",
											"    pm.environment.set(\"channelId\", jsonData.payload.data[engIndex].teamsInfo.channels[0].channelId);\r",
											"    pm.environment.set(\"directoryName\", jsonData.payload.data[engIndex].aca.division.name);\r",
											"    pm.environment.set(\"directoryValue\", jsonData.payload.data[engIndex].aca.division.id);\r",
											"\r",
											"    pm.test(\"Verify that status code is 200\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify client, division and Aca services details\", function() {\r",
											"        pm.expect(jsonData.payload.data[0].clientId).to.eql(clientId);\r",
											"        pm.expect(jsonData.payload.data[0].division.display).to.eql(\"U.S. Reg\");\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"ids\": [{{engagementId}}],\n        \"filterOption\": {\n            \"clientIds\": [\n                {{clientIdForTeams}}\n            ]\n        },\n        \"sortOption\": {\n            \"column\": \"Name\",\n            \"direction\": 1\n        },\n        \"pagingOption\": {\n            \"offset\": 0,\n            \"limit\": 50\n        }\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								},
								"description": "Verify that corresponding team is created for engagement with teams id & teams name. \r\nVerify teams name & teams id is not null."
							},
							"response": []
						},
						{
							"name": "Create Second Engagement With Same Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var clientId = Number(pm.environment.get(\"clientIdForTeams\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"pm.environment.set('secondEngagementName', jsonData.payload.data[0].name);\r",
											"var engagementName = pm.environment.get(\"secondEngagementName\");\r",
											"var sfId = pm.environment.get(\"sfID2\");\r",
											"\r",
											"pm.test(\"Verify second engagement client id & set second eng id\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].clientId).to.eql(clientId);\r",
											"    pm.environment.set(\"secondEngagementId\", jsonData.payload.data[0].id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify engagement name & salesforce id.\", function () { \r",
											"    pm.expect(jsonData.payload.data[0].clientId).is.to.equal(clientId); \r",
											"    pm.expect(jsonData.payload.data[0].name).is.to.equal(engagementName); \r",
											"    pm.expect(jsonData.payload.data[0].salesforceOpportunityId).is.to.equal(sfId); \r",
											"    pm.expect(jsonData.payload.data[0].notes).is.to.equal(null);\r",
											"    pm.expect(jsonData.payload.data[0].deltekProjectId).is.to.equal(null);\r",
											"    pm.expect(jsonData.payload.data[0].isActive).is.to.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Is isPrivileged is true\", function(){\r",
											"    pm.expect(jsonData.payload.data[0].isPrivileged).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var sfID2='SF2N'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"\r",
											"pm.environment.set('sfID2', sfID2);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": \"{{clientIdForTeams}}\",\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"{{sfID2}}\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": true,\n        \"division\": 2,\n        \"acaLeadUsersToAdd\": [\n            \"{{acaUserIdTeams}}\"\n        ],\n        \"acaConsultantUsersToAdd\": [\"{{acaUserIdTeams}}\", \"{{acaUserIdTeams}}\"],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": [{{nonUserAcaId}}]\n    }\n}"
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, I am able to create more engagement for one client/tenant. Also, I am able to create engagement with only aca lead consultant users."
							},
							"response": []
						},
						{
							"name": "Read engagement & verify user is not added twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var clientId = parseInt(pm.environment.get(\"clientIdForTeams\"));\r",
											"var engagementName = pm.environment.get(\"secondEngagementName\");\r",
											"var engagementId = parseInt(pm.environment.get(\"secondEngagementId\"));\r",
											"\r",
											"var consultantLeadName = pm.environment.get(\"teamOwner\");\r",
											"var clientLeadName = pm.environment.get(\"clientUserFullName\");\r",
											"var clientUserId = parseInt(pm.environment.get(\"nonUserAcaId\"));\r",
											"var consultantUserId = parseInt(pm.environment.get(\"acaUserIdTeams\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('salesforceOpportunityId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('deltekProjectId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('isPrivileged');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('division');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('teamsInfo');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Engagement details\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].clientId).to.eql(clientId);\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(engagementName);\r",
											"    pm.expect(jsonData.payload.data[0].id).to.eql(engagementId);\r",
											"    pm.expect(jsonData.payload.data[0].division.display).is.to.equal(\"Technology\");\r",
											"})\r",
											"\r",
											"pm.test(\"Verify Client and Consultant users\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].aca.leadUsers[0].displayName).to.eql(consultantLeadName);\r",
											"    pm.expect(jsonData.payload.data[0].client.leadUsers[0].displayName).to.eql(clientLeadName);\r",
											"    pm.expect(jsonData.payload.data[0].aca.leadUsers[0].userId).to.eql(consultantUserId);\r",
											"    pm.expect(jsonData.payload.data[0].client.leadUsers[0].userId).to.eql(clientUserId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify other consultant & client user is not added twice.\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].aca.consultantUsers.length).to.equal(0);\r",
											"    pm.expect(jsonData.payload.data[0].client.clientUsers.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [{{secondEngagementId}}]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								},
								"description": "-> As a support user, I'm able to read created engagement with twice added user in request.\r\n-> Verify user is not added twice in lead consultant/client & other consultant/client user."
							},
							"response": []
						},
						{
							"name": "Filter Engagements by Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var clientId = parseInt(pm.environment.get(\"clientIdForTeams\"));\r",
											"var engagementId1 = pm.environment.get(\"engagementId\");\r",
											"var engagementName1 = pm.environment.get(\"engagementName\");\r",
											"var sfId = pm.environment.get(\"salesforceOpportunityId\");\r",
											"var engNotes = pm.environment.get(\"engNotes\");\r",
											"var deltekId = pm.environment.get(\"deltekId\");\r",
											"\r",
											"var engagementId2 = pm.environment.get(\"secondEngagementId\");\r",
											"var engagementName2 = pm.environment.get(\"secondEngagementName\");\r",
											"var sfId2 = pm.environment.get(\"sfID2\");\r",
											"\r",
											"var engIndex1 = jsonData.payload.data.map(\r",
											"    function (data) {\r",
											"        return data.name\r",
											"    }).indexOf(engagementName1);\r",
											"\r",
											"var engIndex2 = jsonData.payload.data.map(\r",
											"    function (data) {\r",
											"        return data.name\r",
											"    }).indexOf(engagementName2);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify multiple engagements with same Tenants\", function () {\r",
											"    pm.expect(jsonData.payload.data[engIndex1].clientId).to.eql(clientId);\r",
											"    pm.expect(jsonData.payload.data[engIndex1].id).to.eql(engagementId1);\r",
											"    pm.expect(jsonData.payload.data[engIndex1].name).to.eql(engagementName1);\r",
											"    pm.expect(jsonData.payload.data[engIndex1].salesforceOpportunityId).to.eql(sfId);\r",
											"    pm.expect(jsonData.payload.data[engIndex1].notes).is.to.equal(engNotes);\r",
											"    pm.expect(jsonData.payload.data[engIndex1].isPrivileged).is.to.equal(false);\r",
											"    pm.expect(jsonData.payload.data[engIndex1].deltekProjectId).is.to.equal(deltekId);\r",
											"    \r",
											"    pm.expect(jsonData.payload.data[engIndex2].id).to.eql(engagementId2);\r",
											"    pm.expect(jsonData.payload.data[engIndex2].clientId).to.eql(clientId);\r",
											"    pm.expect(jsonData.payload.data[engIndex2].name).to.eql(engagementName2);\r",
											"    pm.expect(jsonData.payload.data[engIndex2].salesforceOpportunityId).to.eql(sfId2);\r",
											"    pm.expect(jsonData.payload.data[engIndex2].notes).is.to.equal(null);\r",
											"    pm.expect(jsonData.payload.data[engIndex2].isPrivileged).is.to.equal(true);\r",
											"    pm.expect(jsonData.payload.data[engIndex2].deltekProjectId).is.to.equal(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [],\r\n        \"filterOption\": {\r\n            \"clientIds\": [{{clientIdForTeams}}]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								},
								"description": "As a support user, I am able to filter the engagement by client / tenant id.\r\nVerify both created engagement are found in filtered record."
							},
							"response": []
						},
						{
							"name": "Verify active engagements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify all active engagement filtered\", function () {\r",
											"    let i;\r",
											"    console.log(\"Active Engagements: \"+jsonData.payload.data.length);\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i].isActive).to.eql(true);\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('id');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('clientId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('salesforceOpportunityId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('deltekProjectId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('isPrivileged');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('division');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('teamsInfo');\r",
											"    }\r",
											"        \r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"sortOption\": {\r\n            \"column\": \"Name\",\r\n            \"direction\": 1\r\n        },\r\n        \"filterOption\": {\r\n            \"clientIds\": [{{clientIdForTeams}}],\r\n            \"name\": \"\",\r\n            \"status\": \"0\"\r\n        },\r\n        \"pagingOption\": {\r\n            \"offset\": 0,\r\n            \"limit\": 50\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								},
								"description": "As a support user, I am able get all active engagements."
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to edit the created engament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var clientId = Number(pm.environment.get(\"clientIdForTeams\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that isPrivileged value is false\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].isPrivileged).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the engagement updated successfully.\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].clientId).to.eql(clientId);\r",
											"    pm.expect(jsonData.payload.data[0].notes).to.eql(pm.environment.get(\"engUpdateNotes\"));\r",
											"    pm.expect(jsonData.payload.data[0].deltekProjectId).to.eql(pm.environment.get(\"deltekUpdate\"));\r",
											"    pm.expect(jsonData.payload.data[0].salesforceOpportunityId).to.eql(pm.environment.get(\"sfID2\"));\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"Technology\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var engUpdateNotes='Engagement Notes Area Test '+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"var sfID2='SFEE'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"var deltekUpdate='Deltek Project Id '+todaydate.getDate()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getMinutes();\r",
											"\r",
											"pm.environment.set('engUpdateNotes', engUpdateNotes);\r",
											"pm.environment.set('sfID2', sfID2);\r",
											"pm.environment.set('deltekUpdate', deltekUpdate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"engagementId\": {{secondEngagementId}},\n        \"clientId\": \"{{clientIdForTeams}}\",\n        \"notes\": \"{{engUpdateNotes}}\",\n        \"salesforceOpportunityId\": \"{{sfID2}}\",\n        \"deltekProjectId\": \"{{deltekUpdate}}\",\n        \"isPrivileged\": false,\n        \"division\": 2,\n        \"services\": [\n            5\n        ],\n        \"acaLeadUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserId}}\n        ],\n        \"clientLeadUsersToAdd\": [],\n        \"clientUsersToAdd\": [],\n        \"acaLeadUsersToRemove\": [\n            {{acaUserId}}\n        ],\n        \"acaConsultantUsersToRemove\": [\n            0\n        ],\n        \"clientLeadUsersToRemove\": [\n            {{nonACAUserId}}\n        ],\n        \"clientUsersToRemove\": [\n            0\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/update",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"update"
									]
								},
								"description": "As a support user, I am able to edit engagement & able to remove isPrivileged value. \r\n    -> Verify that isPrivileged value is false\r\n    -> Verify the client id for which engagement is created"
							},
							"response": []
						},
						{
							"name": "Verify duplicated engagement is not created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.expect(jsonData.status).to.eql(-1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Message for duplicate engagement\", function () {\r",
											"    pm.expect(jsonData.exception.Message).to.eql(\"An engagement with the same name already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}},\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"{{sfID2}}\",\n        \"deltekProjectId\": \"{{deltekUpdate}}\",\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"services\": [\n            5\n        ],\n        \"acaLeadUsersToAdd\": [\n            {{acaUserIdTeams}}\n        ],\n        \"acaConsultantUsersToAdd\": [\n            {{acaUserIdTeams2}}\n        ],\n        \"clientLeadUsersToAdd\": [\n            {{nonUserAcaId}}\n        ],\n        \"clientUsersToAdd\": []\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a support user, I am able to create engagement for teams with valid aca consultant users."
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Navigation Menus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var teDomain = pm.environment.get(\"teUrl\");\r",
											"let acaNav = 'My ACA Services';\r",
											"\r",
											"var navIndex = jsonData.payload.data.map(\r",
											"    function (data) {\r",
											"        return data.title\r",
											"    }).indexOf(acaNav);\r",
											"console.log(\"Index of ACA Navigation Menu: \",navIndex);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Engagements domain, menu and submenus\", function() {\r",
											"    pm.expect(jsonData.payload.data[navIndex].title).to.eql(acaNav);\r",
											"    pm.expect(jsonData.payload.data[navIndex].domain).to.eql(teDomain);\r",
											"    pm.expect(jsonData.payload.data[navIndex].children[0].domain).to.eql(teDomain);\r",
											"    pm.expect(jsonData.payload.data[navIndex].children[1].domain).to.eql(teDomain);\r",
											"    pm.expect(jsonData.payload.data[navIndex].children[0].title).to.eql(\"My Engagements\");\r",
											"    pm.expect(jsonData.payload.data[navIndex].children[1].title).to.eql(\"File Exchange\");\r",
											"    pm.expect(jsonData.payload.data[navIndex].children[0].url).to.eql(\"/portal/engagement\");\r",
											"    pm.expect(jsonData.payload.data[navIndex].children[1].url).to.eql(\"/portal/engagement/exchange\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/gw/v1/navigation/get",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"gw",
										"v1",
										"navigation",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consultant User",
					"item": [
						{
							"name": "Login with Consultant User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Engagement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 403 Forbidden status\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": \"{{clientIdForTeams}}\",\n        \"name\": \"{{secondEngagementName}}ss\",\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"{{sfID}}om\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"acaLeadUsersToAdd\": [\n            \"{{acaUserId}}\"\n        ],\n        \"acaConsultantUsersToAdd\": [],\n        \"clientLeadUsersToAdd\": [],\n        \"clientUsersToAdd\": []\n    }\n}"
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a consultant user, I am not able to create engagement."
							},
							"response": []
						},
						{
							"name": "Read Engagement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 403 Forbidden status\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [{{engId}}]\r\n    },\r\n     \"sortOption\": {\r\n      \"column\": \"Name\",\r\n      \"direction\": 1\r\n    },\r\n    \"pagingOption\": {\r\n      \"limit\": 0,\r\n      \"offset\": 50\r\n    },\r\n    \"filterOption\": {\r\n      \"name\": \"Del_\",\r\n      \"clientIds\": [\r\n        {{clientIdForTeams}}\r\n      ],\r\n      \"status\": 0,\r\n      \"ignoreUserFilter\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								},
								"description": "As a consultant user, I'm not able to read engagement API."
							},
							"response": []
						},
						{
							"name": "As a consultant user, I'm not able to tenant name, engagement name & engagement role for a user.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I'm not able to tenant name, engagement name & engagement role for a user.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Client User",
					"item": [
						{
							"name": "Login with Client User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Engagement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 403 Forbidden status\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": \"{{clientIdForTeams}}\",\n        \"name\": \"{{secondEngagementName}}ss\",\n        \"notes\": null,\n        \"salesforceOpportunityId\": \"{{sfID}}om\",\n        \"deltekProjectId\": null,\n        \"isPrivileged\": false,\n        \"division\": 1,\n        \"acaLeadUsersToAdd\": [\n            \"{{acaUserId}}\"\n        ],\n        \"acaConsultantUsersToAdd\": [],\n        \"clientLeadUsersToAdd\": [],\n        \"clientUsersToAdd\": []\n    }\n}"
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								},
								"description": "As a client user, I am not able to create engagement."
							},
							"response": []
						},
						{
							"name": "Read Engagement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 403 Forbidden status\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [{{engId}}]\r\n    },\r\n     \"sortOption\": {\r\n      \"column\": \"Name\",\r\n      \"direction\": 1\r\n    },\r\n    \"pagingOption\": {\r\n      \"limit\": 0,\r\n      \"offset\": 50\r\n    },\r\n    \"filterOption\": {\r\n      \"name\": \"Del_\",\r\n      \"clientIds\": [\r\n        {{clientIdForTeams}}\r\n      ],\r\n      \"status\": 0,\r\n      \"ignoreUserFilter\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								},
								"description": "As a client user, I'm not able to read engagement API."
							},
							"response": []
						},
						{
							"name": "As a client user, I'm not able to tenant name, engagement name & engagement role for a user.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I'm not able to tenant name, engagement name & engagement role for a user.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Client Profile/Settings",
			"item": [
				{
					"name": "Consultant User",
					"item": [
						{
							"name": "Login with Consultant User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able read Client Profile Question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able read Client Profile Question\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientPortalId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('generalSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('usRegSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('managedServicesSettings');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientFormalName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortNamePossessive');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('publiclyTradedSecurities');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('privateFundAdviser');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('mutualFundAdviser');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormD');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormPF');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('formCRS');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('secClientExamDate');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractStartDate');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractType');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('quota');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('attorneyClientPrivileged');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmShortName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('outsideCounselNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('clientContactNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('frequencyOfReview');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('approvedChannelsOfCommunication');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('archivalProviders');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientFormalName).to.eql(pm.environment.get(\"clientNameForTeams\"));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortName).to.eql(\"\");\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortNamePossessive).to.eql(\"\");\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.publiclyTradedSecurities).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.privateFundAdviser).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.mutualFundAdviser).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormD).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormPF).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.formCRS).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.secClientExamDate).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractStartDate).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractType).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.quota).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.attorneyClientPrivileged).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmShortName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.outsideCounselNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.clientContactNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.frequencyOfReview).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								},
								"description": "As a consultant user, I am able to get client profile question.\r\n    -> Status code is 200\r\n    -> Verify status is 1 & exception is null\r\n    -> Verify data keys is present\r\n    -> Verify data keys have engagement id, clientportalid & responses"
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get frequencies for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get frequencies for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\"Annually\", \"Semi-annually\", \"Quarterly\", \"Monthly\"];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(4);\r",
											"    for(i=0; jsonData.data.length< 4; i++) {\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get archival-providers for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get archival-providers for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\r",
											"        \"Global Relay Communications Inc.\",\r",
											"        \"Smarsh Inc.\",\r",
											"        \"Microsoft Office 365\",\r",
											"        \"Mimecast Services limited\",\r",
											"        \"Bloomberg Finance L.P.\",\r",
											"        \"Proofpoint\",\r",
											"        \"Intermedia Cloud Communications\",\r",
											"        \"Enterprise Vault Compliance Accelerator\",\r",
											"        \"Barracuda Networks, Inc.\",\r",
											"        \"Symantec Advisor Mail\",\r",
											"        \"Google LLC\"\r",
											"    ];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(11);\r",
											"    for(i=0; jsonData.data.length< 11; i++)\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to get channel-of-communications for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to get channel-of-communications for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\r",
											"        \"E-mail\",\r",
											"        \"Instant BBG\",\r",
											"        \"BBG emails\",\r",
											"        \"IMs\",\r",
											"        \"WeChat\",\r",
											"        \"WhatsApp\"\r",
											"    ];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(6);\r",
											"    for(i=0; jsonData.data.length< 6; i++)\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able save Client Profile Question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able save Client Profile Question\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientPortalId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('generalSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('usRegSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('managedServicesSettings');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientFormalName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortNamePossessive');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('publiclyTradedSecurities');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('privateFundAdviser');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('mutualFundAdviser');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormD');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormPF');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('formCRS');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('secClientExamDate');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractStartDate');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractType');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('quota');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('attorneyClientPrivileged');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmShortName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('outsideCounselNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('clientContactNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('frequencyOfReview');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('approvedChannelsOfCommunication');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('archivalProviders');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientFormalName).to.eql(pm.environment.get('clientFormalName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortName).to.eql(pm.environment.get('clientShortName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortNamePossessive).to.eql(pm.environment.get('clientPossessiveName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.publiclyTradedSecurities).to.eql(true);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.privateFundAdviser).to.eql(true);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.mutualFundAdviser).to.eql(true);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormD).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormPF).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.formCRS).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.secClientExamDate).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractStartDate).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractType).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.quota).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.attorneyClientPrivileged).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmShortName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.outsideCounselNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.clientContactNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.frequencyOfReview).to.eql(null);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var clientFormalName='Client_Formal_Name'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"var clientShortName='CFN'+\"\"+todaydate.getSeconds();\r",
											"var clientPossessiveName='Client_FN_'+todaydate.getDate()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getMinutes();\r",
											"\r",
											"pm.environment.set('clientFormalName', clientFormalName);\r",
											"pm.environment.set('clientShortName', clientShortName);\r",
											"pm.environment.set('clientPossessiveName', clientPossessiveName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"clientProfileSection\": 1,\r\n    \"generalSettings\": {\r\n      \"clientFormalName\": \"{{clientFormalName}}\",\r\n      \"clientShortName\": \"{{clientShortName}}\",\r\n      \"clientShortNamePossessive\": \"{{clientPossessiveName}}\",\r\n      \"publiclyTradedSecurities\": true,\r\n      \"privateFundAdviser\": true,\r\n      \"mutualFundAdviser\": true\r\n    },\r\n    \"usRegSettings\": {\r\n      \"privateFundAdviserFormD\": true,\r\n      \"privateFundAdviserFormPF\": true,\r\n      \"formCRS\": true,\r\n      \"secClientExamDate\": \"2021-07-08T12:50:34.004Z\"\r\n    },\r\n    \"managedServicesSettings\": {\r\n      \"contractStartDate\": \"2021-07-08T12:50:34.004Z\",\r\n      \"contractType\": 0,\r\n      \"quota\": 0,\r\n      \"attorneyClientPrivileged\": true,\r\n      \"lawFirmName\": \"\",\r\n      \"lawFirmShortName\": \"\",\r\n      \"outsideCounselNameTitle\": \"\",\r\n      \"clientContactNameTitle\": \"\",\r\n      \"frequencyOfReview\": \"\",\r\n      \"approvedChannelsOfCommunication\": [\r\n        \"\"\r\n      ],\r\n      \"archivalProviders\": [\r\n      ]\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Support User",
					"item": [
						{
							"name": "Login with Support User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{UserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able read Client Profile Question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able read Client Profile Question\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientPortalId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('generalSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('usRegSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('managedServicesSettings');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientFormalName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortNamePossessive');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('publiclyTradedSecurities');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('privateFundAdviser');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('mutualFundAdviser');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormD');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormPF');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('formCRS');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('secClientExamDate');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractStartDate');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractType');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('quota');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('attorneyClientPrivileged');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmShortName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('outsideCounselNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('clientContactNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('frequencyOfReview');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('approvedChannelsOfCommunication');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('archivalProviders');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientFormalName).to.eql(pm.environment.get('clientFormalName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortName).to.eql(pm.environment.get('clientShortName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortNamePossessive).to.eql(pm.environment.get('clientPossessiveName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.publiclyTradedSecurities).to.eql(true);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.privateFundAdviser).to.eql(true);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.mutualFundAdviser).to.eql(true);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormD).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormPF).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.formCRS).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.secClientExamDate).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractStartDate).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractType).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.quota).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.attorneyClientPrivileged).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmShortName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.outsideCounselNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.clientContactNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.frequencyOfReview).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to save Client Profile Question",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to save Client Profile Question\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data.length).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientPortalId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('generalSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('usRegSettings');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('managedServicesSettings');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientFormalName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortName');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('clientShortNamePossessive');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('publiclyTradedSecurities');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('privateFundAdviser');\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings).to.have.property('mutualFundAdviser');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormD');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('privateFundAdviserFormPF');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('formCRS');\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings).to.have.property('secClientExamDate');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractStartDate');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('contractType');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('quota');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('attorneyClientPrivileged');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('lawFirmShortName');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('outsideCounselNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('clientContactNameTitle');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('frequencyOfReview');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('approvedChannelsOfCommunication');\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings).to.have.property('archivalProviders');\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].clientPortalId).to.eql(parseInt(pm.environment.get(\"clientIdForTeams\")));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientFormalName).to.eql(pm.environment.get('clientFormalName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortName).to.eql(pm.environment.get('clientShortName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.clientShortNamePossessive).to.eql(pm.environment.get('clientPossessiveName'));\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.publiclyTradedSecurities).to.eql(true);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.privateFundAdviser).to.eql(true);\r",
											"    pm.expect(jsonData.payload.data[0].generalSettings.mutualFundAdviser).to.eql(true);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormD).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.privateFundAdviserFormPF).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.formCRS).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].usRegSettings.secClientExamDate).to.eql(null);\r",
											"\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractStartDate).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.contractType).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.quota).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.attorneyClientPrivileged).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.lawFirmShortName).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.outsideCounselNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.clientContactNameTitle).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].managedServicesSettings.frequencyOfReview).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var todaydate=new Date();\r",
											"var clientFormalName='Client_Formal_Name'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
											"var clientShortName='CFN'+\"\"+todaydate.getSeconds();\r",
											"var clientPossessiveName='Client_FN_'+todaydate.getDate()+\"\"+todaydate.getSeconds()+\"\"+todaydate.getMinutes();\r",
											"\r",
											"pm.environment.set('clientFormalName', clientFormalName);\r",
											"pm.environment.set('clientShortName', clientShortName);\r",
											"pm.environment.set('clientPossessiveName', clientPossessiveName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"clientProfileSection\": 1,\r\n    \"generalSettings\": {\r\n      \"clientFormalName\": \"{{clientFormalName}}\",\r\n      \"clientShortName\": \"{{clientShortName}}\",\r\n      \"clientShortNamePossessive\": \"{{clientPossessiveName}}\",\r\n      \"publiclyTradedSecurities\": true,\r\n      \"privateFundAdviser\": true,\r\n      \"mutualFundAdviser\": true\r\n    },\r\n    \"usRegSettings\": {\r\n      \"privateFundAdviserFormD\": true,\r\n      \"privateFundAdviserFormPF\": true,\r\n      \"formCRS\": true,\r\n      \"secClientExamDate\": \"2021-07-08T12:50:34.004Z\"\r\n    },\r\n    \"managedServicesSettings\": {\r\n      \"contractStartDate\": \"2021-07-08T12:50:34.004Z\",\r\n      \"contractType\": 0,\r\n      \"quota\": 0,\r\n      \"attorneyClientPrivileged\": true,\r\n      \"lawFirmName\": \"\",\r\n      \"lawFirmShortName\": \"\",\r\n      \"outsideCounselNameTitle\": \"\",\r\n      \"clientContactNameTitle\": \"\",\r\n      \"frequencyOfReview\": \"\",\r\n      \"approvedChannelsOfCommunication\": [\r\n        \"\"\r\n      ],\r\n      \"archivalProviders\": [\r\n      ]\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get frequencies for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get frequencies for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\"Annually\", \"Semi-annually\", \"Quarterly\", \"Monthly\"];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(4);\r",
											"    for(i=0; jsonData.data.length< 4; i++) {\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get archival-providers for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get archival-providers for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\r",
											"        \"Global Relay Communications Inc.\",\r",
											"        \"Smarsh Inc.\",\r",
											"        \"Microsoft Office 365\",\r",
											"        \"Mimecast Services limited\",\r",
											"        \"Bloomberg Finance L.P.\",\r",
											"        \"Proofpoint\",\r",
											"        \"Intermedia Cloud Communications\",\r",
											"        \"Enterprise Vault Compliance Accelerator\",\r",
											"        \"Barracuda Networks, Inc.\",\r",
											"        \"Symantec Advisor Mail\",\r",
											"        \"Google LLC\"\r",
											"    ];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(11);\r",
											"    for(i=0; jsonData.data.length< 11; i++)\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to get channel-of-communications for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a support user, I am able to get channel-of-communications for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\r",
											"        \"E-mail\",\r",
											"        \"Instant BBG\",\r",
											"        \"BBG emails\",\r",
											"        \"IMs\",\r",
											"        \"WeChat\",\r",
											"        \"WhatsApp\"\r",
											"    ];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(6);\r",
											"    for(i=0; jsonData.data.length< 6; i++)\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client User",
					"item": [
						{
							"name": "Login with Client User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 forbidden for Client Profile Question Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden for Client Profile Question Read\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								},
								"description": "As a client user, I'm not able read client profile question.\r\n403 Forbidden status should get."
							},
							"response": []
						},
						{
							"name": "As a client user, I am getting 403 forbidden for Client Profile Question Save",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden for Client Profile Question Save\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"clientProfileSection\": 1,\r\n    \"generalSettings\": {\r\n      \"clientFormalName\": \"{{clientFormalName}}\",\r\n      \"clientShortName\": \"{{clientShortName}}\",\r\n      \"clientShortNamePossessive\": \"{{clientPossessiveName}}\",\r\n      \"publiclyTradedSecurities\": true,\r\n      \"privateFundAdviser\": true,\r\n      \"mutualFundAdviser\": true\r\n    },\r\n    \"usRegSettings\": {\r\n      \"privateFundAdviserFormD\": true,\r\n      \"privateFundAdviserFormPF\": true,\r\n      \"formCRS\": true,\r\n      \"secClientExamDate\": \"2021-07-08T12:50:34.004Z\"\r\n    },\r\n    \"managedServicesSettings\": {\r\n      \"contractStartDate\": \"2021-07-08T12:50:34.004Z\",\r\n      \"contractType\": 0,\r\n      \"quota\": 0,\r\n      \"attorneyClientPrivileged\": true,\r\n      \"lawFirmName\": \"\",\r\n      \"lawFirmShortName\": \"\",\r\n      \"outsideCounselNameTitle\": \"\",\r\n      \"clientContactNameTitle\": \"\",\r\n      \"frequencyOfReview\": \"\",\r\n      \"approvedChannelsOfCommunication\": [\r\n        \"\"\r\n      ],\r\n      \"archivalProviders\": [\r\n      ]\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								},
								"description": "As a client user, I am not able to save client profile question. 403 Forbidden status should get."
							},
							"response": []
						},
						{
							"name": "As a client user, I am able to get frequencies for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am able to get frequencies for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\"Annually\", \"Semi-annually\", \"Quarterly\", \"Monthly\"];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(4);\r",
											"    for(i=0; jsonData.data.length< 4; i++) {\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am able to get archival-providers for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am able to get archival-providers for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\r",
											"        \"Global Relay Communications Inc.\",\r",
											"        \"Smarsh Inc.\",\r",
											"        \"Microsoft Office 365\",\r",
											"        \"Mimecast Services limited\",\r",
											"        \"Bloomberg Finance L.P.\",\r",
											"        \"Proofpoint\",\r",
											"        \"Intermedia Cloud Communications\",\r",
											"        \"Enterprise Vault Compliance Accelerator\",\r",
											"        \"Barracuda Networks, Inc.\",\r",
											"        \"Symantec Advisor Mail\",\r",
											"        \"Google LLC\"\r",
											"    ];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(11);\r",
											"    for(i=0; jsonData.data.length< 11; i++)\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I am able to get channel-of-communications for reference data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am able to get channel-of-communications for reference data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    let value = [\r",
											"        \"E-mail\",\r",
											"        \"Instant BBG\",\r",
											"        \"BBG emails\",\r",
											"        \"IMs\",\r",
											"        \"WeChat\",\r",
											"        \"WhatsApp\"\r",
											"    ];\r",
											"    let i;\r",
											"\r",
											"    pm.expect(jsonData.data.length).to.eql(6);\r",
											"    for(i=0; jsonData.data.length< 6; i++)\r",
											"        pm.expect(jsonData.data[i]).to.eql(value[i]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Template Generator",
			"item": [
				{
					"name": "Consultant User",
					"item": [
						{
							"name": "Login with Consultant User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to read all template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// https://acaalpha.atlassian.net/browse/ACATE-436\r",
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status is 1 & exception is null\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys is present.\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('id');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('description');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('divisionId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('reportTemplateName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('questions');\r",
											"    }\r",
											"    let length = jsonData.payload.data.length;\r",
											"    pm.expect(jsonData.payload.data[length-1].id).to.eql(1);\r",
											"    pm.expect(jsonData.payload.data[length-1].name).to.eql(\"US Reg IA Review Report\");\r",
											"    pm.expect(jsonData.payload.data[length-1].description).to.eql(\"ACA Findings and Recommendations Report\");\r",
											"    pm.expect(jsonData.payload.data[length-1].divisionId).to.eql(1);\r",
											"    pm.expect(jsonData.payload.data[length-1].reportTemplateName).to.eql(\"US Reg IA Review Report.docx\");\r",
											"    pm.expect(jsonData.payload.data[length-1].questions).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to read sharedpointdirectories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"\r",
											"pm.test(\"Verify status & exception.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys is present.\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('teamsFolderId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subFolders');\r",
											"\r",
											"    pm.environment.set('reportsFolderId0',jsonData.payload.data[0].teamsFolderId);\r",
											"    pm.environment.set('reportsFolderId1',jsonData.payload.data[1].teamsFolderId);\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('teamsFolderId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('subFolders');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 30000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to create report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am able to create report\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    let i;\r",
											"    let jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('fileName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('webUrl');\r",
											"        pm.environment.set('reportIdentifier', jsonData.payload.data[i].reportIdentifier);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"templateId\": 1,\r\n        \"destinationFolderId\": \"{{reportsFolderId0}}\",\r\n        \"reportName\": \"Report{{$randomAbbreviation}}\",\r\n        \"engagementId\": {{engagementId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to read template by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"\r",
											"pm.test(\"Verify status is 1 & exception is null\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify template details\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('description');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('divisionId');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('reportTemplateName');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('questions');\r",
											"    pm.expect(jsonData.payload.data.questions.length).to.eql(23);\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.questions.length; i++) {\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('quetionId');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('questionDescription');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('contentControlId');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('questionType');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('questionOptions');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('defaultAnswer');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('order');\r",
											"        pm.expect(jsonData.payload.data.questions[i]).to.have.property('dependencies');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I'm able to save answers to alpha db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I'm able to save answers to alpha db\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('description');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('divisionId');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('reportTemplateName');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('questions');\r",
											"\r",
											"    pm.expect(jsonData.payload.data.questions.length).to.eql(23);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am able to exportreport in shareddocuments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"\r",
											"pm.test(\"Verify status & exception.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys is present.\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('fileName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('webUrl');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/ReportSQL.plugin.docx"
										},
										{
											"key": "fileName",
											"value": "ReportAGP.plugin.docx",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "templateId",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Support User",
					"item": [
						{
							"name": "Login with Support User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{UserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to read all template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// https://acaalpha.atlassian.net/browse/ACATE-436\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status is 1 & exception is null\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys is present.\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to read sharedpointdirectories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"\r",
											"pm.test(\"Verify status & exception.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys is present.\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('teamsFolderId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subFolders');\r",
											"\r",
											"    pm.environment.set('reportsFolderId0',jsonData.payload.data[0].teamsFolderId);\r",
											"    pm.environment.set('reportsFolderId1',jsonData.payload.data[1].teamsFolderId);\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('teamsFolderId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('subFolders');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I am able to create report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"\r",
											"pm.test(\"Verify status & exception.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys is present.\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('fileName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('webUrl');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"templateId\": 1,\r\n        \"destinationFolderId\": \"{{reportsFolderId0}}\",\r\n        \"reportName\": \"Report{{$randomAbbreviation}}\",\r\n        \"engagementId\": {{engagementId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a support user, I'm able to save answers to alpha db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I'm able to save answers to alpha db\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('description');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('divisionId');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('reportTemplateName');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('questions');\r",
											"\r",
											"    pm.expect(jsonData.payload.data.questions.length).to.eql(23);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client User",
					"item": [
						{
							"name": "Login with Client User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I should get 403 for template read api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I should get 403 for template read api.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user,I should get 403 for SharedPointDirectories directories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user,I should get 403 for SharedPointDirectories directories\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I should get 403 for Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I should get 403 for Create Report\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"templateId\": 1,\r\n        \"destinationFolderId\": \"{{reportsFolderId0}}\",\r\n        \"reportName\": \"Report{{$randomAbbreviation}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I'm not able to save answers to alpha db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I'm not able to save answers to alpha db\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a client user, I'm not able to exportreport in shareddocuments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I'm not able to exportreport in shareddocuments\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileName",
											"value": "AB78",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/ReportSQL.plugin.docx"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "File Exchange",
			"item": [
				{
					"name": "File Exchange with Consultant User",
					"item": [
						{
							"name": "Multiple File Move Scenario",
							"item": [
								{
									"name": "Login with Consultant User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify navigation menu before client selection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found\", function() {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Navigation",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Navigation"
											]
										},
										"description": "Verify that TE navigation menu is forbidden until selected tenant for consultant user."
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify TE navigation menu after selecting client",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"let teDomain = pm.environment.get(\"teUrl\");\r",
													"let i;\r",
													"let acaNav = 'My ACA Services';\r",
													"let subMenuTitle = [\"My Engagements\", \"File Exchange\", \"Client Profile/Settings\", \"Template Generator\", \"Review Workspace\"];\r",
													"let subMenuUrl = [\"/portal/engagement\", \"/portal/engagement/exchange\", \"/portal/clientprofile/list\", \"/portal/report/list\", \"/portal/reviews/list\"];\r",
													"\r",
													"pm.test(\"Verify navigation menu for TE Url.\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('payload');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('icon');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('title');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('url');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('domain');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('children');\r",
													"    pm.expect(jsonData.payload.data.children.length).to.eql(5);\r",
													"\r",
													"    for(i=0; i<jsonData.payload.data.children.length; i++) {\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('title');\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('url');\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('domain');\r",
													"        \r",
													"        pm.expect(jsonData.payload.data.children[i].title).to.eql(subMenuTitle[i]);\r",
													"        pm.expect(jsonData.payload.data.children[i].url).to.eql(subMenuUrl[i]);\r",
													"        pm.expect(jsonData.payload.data.children[i].domain).to.eql(teDomain);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Navigation",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Navigation"
											]
										},
										"description": "Verify that TE navigation menu & submenu for consultant users.\r\n    -> Menu Name is- My ACA Services\r\n    -> There are 4 sub-menu for consultant users.\r\n    -> The sub-menu name are- \"My Engagements\", \"File Exchange\", \"Client Profile/Settings\", \"Template Generator\"\r\n    -> Verify sub-menu url"
									},
									"response": []
								},
								{
									"name": "Engagement Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Directory Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"initialize\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create First Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstFolderId\", jsonData.payload.data[0].directoryId);\r",
													"pm.environment.set(\"firstFolderName\", jsonData.payload.data[0].directoryName);\r",
													"// var rootDirectoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload First File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Second File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/TestDoc.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/TestDoc.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Third File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"thirdAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/clientImport.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/clientImport.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondFolderId\", jsonData.payload.data[0].directoryId);\r",
													"pm.environment.set(\"secondFolderName\", jsonData.payload.data[0].directoryName);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move All Files From First To Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var firstFileId = parseInt(pm.environment.get(\"firstAssetsId\"));\r",
													"var secondFileId = parseInt(pm.environment.get(\"secondAssetsId\"));\r",
													"var thirdFileId = parseInt(pm.environment.get(\"thirdAssetsId\"));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{firstAssetsId}},\r\n            {{secondAssetsId}},\r\n            {{thirdAssetsId}}\r\n        ],\r\n        \"toDirectoryId\": {{secondFolderId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{firstFolderId}}/assets/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{firstFolderId}}",
												"assets",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload First File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Second File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/TestDoc.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/TestDoc.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Third File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"thirdAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/clientImport.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/clientImport.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move Multiple File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var firstFileId = parseInt(pm.environment.get(\"firstAssetsId\"));\r",
													"var secondFileId = parseInt(pm.environment.get(\"secondAssetsId\"));\r",
													"var thirdFileId = parseInt(pm.environment.get(\"thirdAssetsId\"));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data value include duplicate file id\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).not.to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(firstFileId);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(secondFileId);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(thirdFileId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{firstAssetsId}},\r\n            {{secondAssetsId}},\r\n            {{thirdAssetsId}}\r\n        ],\r\n        \"toDirectoryId\": {{secondFolderId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{firstFolderId}}/assets/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{firstFolderId}}",
												"assets",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Replace files in destination folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetId\": {{firstAssetsId}},\r\n    \"toDirectoryId\": {{firstFolderId}},\r\n    \"actionType\": 2         //for replacing file in destination folder\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{secondFolderId}}/asset/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{secondFolderId}}",
												"asset",
												"move"
											]
										},
										"description": "Move files api for replacing files in destination file."
									},
									"response": []
								},
								{
									"name": "New Version Of Files Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetId\": {{thirdAssetsId}},\r\n    \"toDirectoryId\": {{firstFolderId}},\r\n    \"actionType\": 1         //to keep both files (original & duplicate)\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{secondFolderId}}/asset/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{secondFolderId}}",
												"asset",
												"move"
											]
										},
										"description": "Move Files API for keep duplicate files in destination folders."
									},
									"response": []
								},
								{
									"name": "Delete First Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/{{firstFolderId}}",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"{{firstFolderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/{{secondFolderId}}",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"{{secondFolderId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reference Data- Allowed File Extension",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"let i=0;\r",
											"let typeOfFileAllowed = jsonData.payload.data.length;\r",
											"let supportFileName = ['pdf', 'csv', 'txt', 'docx', 'doc', 'xlsx', 'xls', 'pptx', 'ppt', 'html', 'eml',  'gif', 'png', 'jpg', 'jpeg', 'zip', 'rtf', 'msg', 'svg', 'xml', 'log', 'mp4', 'sevenz', 'tsv', 'warc', 'qbb', 'qbw'];\r",
											"\r",
											"pm.test(\"Verify that status, exception & keys of response\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify allowed file type by name.\", function () {\r",
											"    pm.expect(typeOfFileAllowed).to.equal(27);\r",
											"    for(i=0; i<typeOfFileAllowed; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('extensions');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('mimeTypes');\r",
											"        pm.expect(jsonData.payload.data[i].name).to.equal(supportFileName[i]);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Verify extensions.\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].extensions[0]).to.equal('pdf');\r",
											"    pm.expect(jsonData.payload.data[1].extensions[0]).to.equal('csv');\r",
											"    pm.expect(jsonData.payload.data[2].extensions[0]).to.equal('txt');\r",
											"    pm.expect(jsonData.payload.data[3].extensions[0]).to.equal('docx');\r",
											"    pm.expect(jsonData.payload.data[3].extensions[1]).to.equal('docm');\r",
											"    pm.expect(jsonData.payload.data[3].extensions[2]).to.equal('dotx');\r",
											"    pm.expect(jsonData.payload.data[3].extensions[3]).to.equal('dotm');\r",
											"    pm.expect(jsonData.payload.data[3].extensions[4]).to.equal('docb');\r",
											"    pm.expect(jsonData.payload.data[4].extensions[0]).to.equal('doc');\r",
											"    pm.expect(jsonData.payload.data[4].extensions[1]).to.equal('dot');\r",
											"    pm.expect(jsonData.payload.data[4].extensions[2]).to.equal('wbk');\r",
											"    pm.expect(jsonData.payload.data[5].extensions[0]).to.equal('xlsx');\r",
											"    pm.expect(jsonData.payload.data[5].extensions[1]).to.equal('xlsm');\r",
											"    pm.expect(jsonData.payload.data[5].extensions[2]).to.equal('xltx');\r",
											"    pm.expect(jsonData.payload.data[5].extensions[3]).to.equal('xltm');\r",
											"    pm.expect(jsonData.payload.data[6].extensions[0]).to.equal('xls');\r",
											"    pm.expect(jsonData.payload.data[6].extensions[1]).to.equal('xlt');\r",
											"    pm.expect(jsonData.payload.data[6].extensions[2]).to.equal('xlm');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/allowedfileextensions",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"allowedfileextensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify ignore file types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status, exception & keys of response\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify ignore file type is DS_Store\", function () {\r",
											"   pm.expect(jsonData.payload.data.length).to.equal(1); \r",
											"   pm.expect(jsonData.payload.data[0]).to.equal(\"DS_Store\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								},
								"description": "Verify ignore file type is DS_Store."
							},
							"response": []
						},
						{
							"name": "Verify file limit to be uploaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that file limit to be upload is 1024\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data).to.eql(1024);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								},
								"description": "As a consultant user, file limit to be uploaded."
							},
							"response": []
						},
						{
							"name": "Upload file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileId\", jsonData.payload.data[0].id);\r",
											"var rootDirectoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder uploaded into root directory\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(rootDirectoryId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = pm.environment.get(\"fileId\");\r",
											"var directoryName = pm.environment.get(\"directoryName\");\r",
											"var directoryValue = pm.environment.get(\"directoryValue\").toString();\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subAssets');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify uploaded file\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].id).to.eql(fileId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify root folder structure\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryTypeIdentifier).to.eql(directoryValue);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.eql(directoryName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that email is sent\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"subject\": \"All File Changes Related Test\",\r\n        \"message\": \"<p>Pre-Test Messages</p>\",\r\n        \"assets\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"notifyclient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content of downloaded file\", function() {\r",
											"    pm.expect(jsonData).to.eql(12345);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that file is deleted\",  function() {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Directory after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = pm.environment.get(\"fileId\");\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify uploaded file\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload first file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileId\", jsonData.payload.data[0].id);\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload second file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"secondFileId\", jsonData.payload.data[0].id);\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload1.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"parentOfRootId\", jsonData.payload.data[0].parentDirectoryId);\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify multiple files\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[1].name).to.eql(\"upload1.txt\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that both files belongs to same folder\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[1].folderId).to.eql(directoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.environment.set(\"uploadedFolderName\", jsonData.payload.data[0].directoryName);\r",
											"pm.environment.set(\"uploadedFolderId\", jsonData.payload.data[0].directoryId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder created under root directory\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.include(\"APIFolder\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"directoryName\": \"APIFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": {{directoryValue}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create sub folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"subFolderId\", jsonData.payload.data[0].directoryId);\r",
											"pm.environment.set(\"subFolderName\", jsonData.payload.data[0].directoryName);\r",
											"\r",
											"var parentDirectoryId = pm.environment.get(\"uploadedFolderId\");\r",
											"var parentDirectoryName = pm.environment.get(\"uploadedFolderName\");\r",
											"var directoryValue = '5';\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify sub folder structure\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(parentDirectoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryPath).to.include(parentDirectoryName);\r",
											"    pm.expect(jsonData.payload.data[0].directoryTypeIdentifier).to.eql(directoryValue);\r",
											"    pm.expect(jsonData.payload.data[0].directoryType).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"APISubFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": 5\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload File in First Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileIdToMove1\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"movedFileName1\", jsonData.payload.data[0].name);\r",
											"\r",
											"var folderId = parseInt(pm.environment.get(\"uploadedFolderId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder structure\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(folderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{uploadedFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Uploaded File To SubFolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{fileIdToMove1}}\r\n        ],\r\n        \"toDirectoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Duplicate File In First Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"dupFileId\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"dupFileName\", jsonData.payload.data[0].name);\r",
											"\r",
											"var folderId = parseInt(pm.environment.get(\"uploadedFolderId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder structure\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(folderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{uploadedFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Duplicate File To SubFolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = parseInt(pm.environment.get(\"fileIdToMove1\"));\r",
											"var dupFileId = parseInt(pm.environment.get(\"dupFileId\"));\r",
											"var dupFileName = parseInt(pm.environment.get(\"dupFileName\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify existing id of file return.\", function () {\r",
											"    pm.expect(jsonData.payload.data[0][0]).to.eql(fileId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify duplicate file id & name is not displaying.\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.not.include(dupFileId);\r",
											"    pm.expect(jsonData.payload.data).to.not.include(dupFileName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{fileIdToMove1}}\r\n        ],\r\n        \"toDirectoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move subfolder to rootfolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"var parentDirectoryId = pm.environment.get(\"parentOfRootId\");\r",
											"var movedFolderId = pm.environment.get(\"subFolderId\");\r",
											"var movedFolderName = pm.environment.get(\"subFolderName\");\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of data response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('parentDirectoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryTypeIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subAssets');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify directoryId, parentDirectoryId, directoryName, directoryPath\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(parentDirectoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.eql(\"U.S. Reg\");\r",
											"    pm.expect(jsonData.payload.data[0].directoryPath).to.eql(\"/CA-Exchange/U.S. Reg\");\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryTypeIdentifier');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify moved folder is inside subDirectories of rootfolder\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryId).to.eql(movedFolderId);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryName).to.eql(movedFolderName);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].parentDirectoryId).to.eql(directoryId);\r",
											"    var directoryPath = \"/CA-Exchange/U.S. Reg/\"+movedFolderName;\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryPath).to.eql(directoryPath);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('directoryTypeIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('subAssets');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"newParentId\": {{rootDirectoryId}},\r\n        \"directoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryIds\": [\r\n            {{uploadedFolderId}}\r\n        ],\r\n        \"assetIds\": []\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.include(\"RenamedFolder\");\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(directoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"RenamedFolder{{$randomInt}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete multiple files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that file is deleted\",  function() {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subfolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{subFolderId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{subFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultant User Log Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "File Exchange with Support User",
					"item": [
						{
							"name": "Multiple File Move Scenario",
							"item": [
								{
									"name": "Login with Support User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{UserName}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Navigation Using TE Url after client selection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"let teDomain = pm.environment.get(\"teUrl\");\r",
													"let i;\r",
													"let acaNav = 'My ACA Services';\r",
													"let subMenuTitle = [\"My Engagements\", \"File Exchange\", \"Client Profile/Settings\", \"Template Generator\", \"Review Workspace\"];\r",
													"let subMenuUrl = [\"/portal/engagement\", \"/portal/engagement/exchange\", \"/portal/clientprofile/list\", \"/portal/report/list\", \"/portal/reviews/list\"];\r",
													"\r",
													"pm.test(\"Verify navigation menu for TE Url.\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('payload');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('icon');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('title');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('url');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('domain');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('children');\r",
													"    pm.expect(jsonData.payload.data.children.length).to.eql(5);\r",
													"\r",
													"    for(i=0; i<jsonData.payload.data.children.length; i++) {\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('title');\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('url');\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('domain');\r",
													"        \r",
													"        pm.expect(jsonData.payload.data.children[i].title).to.eql(subMenuTitle[i]);\r",
													"        pm.expect(jsonData.payload.data.children[i].url).to.eql(subMenuUrl[i]);\r",
													"        pm.expect(jsonData.payload.data.children[i].domain).to.eql(teDomain);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Navigation",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Navigation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Engagement Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Directory Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"initialize\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create First Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstFolderId\", jsonData.payload.data[0].directoryId);\r",
													"pm.environment.set(\"firstFolderName\", jsonData.payload.data[0].directoryName);\r",
													"// var rootDirectoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload First File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Second File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/TestDoc.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/TestDoc.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Third File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"thirdAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/clientImport.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/clientImport.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondFolderId\", jsonData.payload.data[0].directoryId);\r",
													"pm.environment.set(\"secondFolderName\", jsonData.payload.data[0].directoryName);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move All Files From First To Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var firstFileId = parseInt(pm.environment.get(\"firstAssetsId\"));\r",
													"var secondFileId = parseInt(pm.environment.get(\"secondAssetsId\"));\r",
													"var thirdFileId = parseInt(pm.environment.get(\"thirdAssetsId\"));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{firstAssetsId}},\r\n            {{secondAssetsId}},\r\n            {{thirdAssetsId}}\r\n        ],\r\n        \"toDirectoryId\": {{secondFolderId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{firstFolderId}}/assets/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{firstFolderId}}",
												"assets",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload First File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Second File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/TestDoc.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/TestDoc.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Third File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"thirdAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/clientImport.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/clientImport.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move Multiple File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var firstFileId = parseInt(pm.environment.get(\"firstAssetsId\"));\r",
													"var secondFileId = parseInt(pm.environment.get(\"secondAssetsId\"));\r",
													"var thirdFileId = parseInt(pm.environment.get(\"thirdAssetsId\"));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data value include duplicate file id\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).not.to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(firstFileId);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(secondFileId);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(thirdFileId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{firstAssetsId}},\r\n            {{secondAssetsId}},\r\n            {{thirdAssetsId}}\r\n        ],\r\n        \"toDirectoryId\": {{secondFolderId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{firstFolderId}}/assets/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{firstFolderId}}",
												"assets",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Replace files in destination folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetId\": {{firstAssetsId}},\r\n    \"toDirectoryId\": {{firstFolderId}},\r\n    \"actionType\": 2         //for replacing file in destination folder\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{secondFolderId}}/asset/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{secondFolderId}}",
												"asset",
												"move"
											]
										},
										"description": "Move files api for replacing files in destination file."
									},
									"response": []
								},
								{
									"name": "New Version Of Files Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetId\": {{thirdAssetsId}},\r\n    \"toDirectoryId\": {{firstFolderId}},\r\n    \"actionType\": 1         //to keep both files (original & duplicate)\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{secondFolderId}}/asset/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{secondFolderId}}",
												"asset",
												"move"
											]
										},
										"description": "Move Files API for keep duplicate files in destination folders."
									},
									"response": []
								},
								{
									"name": "Delete First Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/{{firstFolderId}}",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"{{firstFolderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/{{secondFolderId}}",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"{{secondFolderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Verify ignore file types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status, exception & keys of response\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify ignore file type is DS_Store\", function () {\r",
											"   pm.expect(jsonData.payload.data.length).to.equal(1); \r",
											"   pm.expect(jsonData.payload.data[0]).to.equal(\"DS_Store\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								},
								"description": "Verify ignore file type is DS_Store."
							},
							"response": []
						},
						{
							"name": "Verify file limit to be uploaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that file limit to be upload is 1024\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data).to.eql(1024);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								},
								"description": "As a support user, file limit to be uploaded."
							},
							"response": []
						},
						{
							"name": "Upload File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileId\", jsonData.payload.data[0].id);\r",
											"var rootDirectoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder uploaded into root directory\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(rootDirectoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = pm.environment.get(\"fileId\");\r",
											"var directoryName = pm.environment.get(\"directoryName\");\r",
											"var directoryValue = pm.environment.get(\"directoryValue\").toString();\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subAssets');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify uploaded file\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].id).to.eql(fileId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify root folder structure\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryTypeIdentifier).to.eql(directoryValue);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.eql(directoryName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content of downloaded file\", function() {\r",
											"    pm.expect(jsonData).to.eql(12345);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that file is deleted\",  function() {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Directory after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = pm.environment.get(\"fileId\");\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify uploaded file\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload first file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileId\", jsonData.payload.data[0].id);\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload second file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"secondFileId\", jsonData.payload.data[0].id);\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload1.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify multiple files\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[1].name).to.eql(\"upload1.txt\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that both files belongs to same folder\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[1].folderId).to.eql(directoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.environment.set(\"uploadedFolderName\", jsonData.payload.data[0].directoryName);\r",
											"pm.environment.set(\"uploadedFolderId\", jsonData.payload.data[0].directoryId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder created under root directory\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.include(\"APIFolder\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"directoryName\": \"APIFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": {{directoryValue}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create sub folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"subFolderId\", jsonData.payload.data[0].directoryId);\r",
											"pm.environment.set(\"subFolderName\", jsonData.payload.data[0].directoryName);\r",
											"\r",
											"var parentDirectoryId = pm.environment.get(\"uploadedFolderId\");\r",
											"var parentDirectoryName = pm.environment.get(\"uploadedFolderName\");\r",
											"var directoryValue = pm.environment.get(\"directoryValue\").toString();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify sub folder structure\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(parentDirectoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryPath).to.include(parentDirectoryName);\r",
											"    pm.expect(jsonData.payload.data[0].directoryTypeIdentifier).to.eql(directoryValue);\r",
											"    pm.expect(jsonData.payload.data[0].directoryType).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"APISubFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload File in First Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileIdToMove1\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"movedFileName1\", jsonData.payload.data[0].name);\r",
											"\r",
											"var folderId = parseInt(pm.environment.get(\"uploadedFolderId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder structure\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(folderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{uploadedFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Uploaded File To SubFolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{fileIdToMove1}}\r\n        ],\r\n        \"toDirectoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Duplicate File In First Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"dupFileId\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"dupFileName\", jsonData.payload.data[0].name);\r",
											"\r",
											"var folderId = parseInt(pm.environment.get(\"uploadedFolderId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder structure\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(folderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{uploadedFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Duplicate File To SubFolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = parseInt(pm.environment.get(\"fileIdToMove1\"));\r",
											"var dupFileId = parseInt(pm.environment.get(\"dupFileId\"));\r",
											"var dupFileName = parseInt(pm.environment.get(\"dupFileName\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify existing id of file return.\", function () {\r",
											"    pm.expect(jsonData.payload.data[0][0]).to.eql(fileId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify duplicate file id & name is not displaying.\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.not.include(dupFileId);\r",
											"    pm.expect(jsonData.payload.data).to.not.include(dupFileName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{fileIdToMove1}}\r\n        ],\r\n        \"toDirectoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move subfolder to rootfolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"var parentDirectoryId = pm.environment.get(\"parentOfRootId\");\r",
											"var movedFolderId = pm.environment.get(\"subFolderId\");\r",
											"var movedFolderName = pm.environment.get(\"subFolderName\");\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of data response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('parentDirectoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryTypeIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subAssets');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify directoryId, parentDirectoryId, directoryName, directoryPath\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(parseInt(parentDirectoryId));\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.eql(\"U.S. Reg\");\r",
											"    pm.expect(jsonData.payload.data[0].directoryPath).to.eql(\"/CA-Exchange/U.S. Reg\");\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryTypeIdentifier');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify moved folder is inside subDirectories of rootfolder\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryId).to.eql(movedFolderId);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryName).to.eql(movedFolderName);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].parentDirectoryId).to.eql(directoryId);\r",
											"    var directoryPath = \"/CA-Exchange/U.S. Reg/\"+movedFolderName;\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryPath).to.eql(directoryPath);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('directoryTypeIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('subAssets');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"newParentId\": {{rootDirectoryId}},\r\n        \"directoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryIds\": [\r\n            {{uploadedFolderId}}\r\n        ],\r\n        \"assetIds\": []\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.include(\"RenamedFolder\");\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(directoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"RenamedFolder{{$randomInt}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete multiple files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that file is deleted\",  function() {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subfolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{subFolderId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{subFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Support User Log Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "File Exchange with Client User",
					"item": [
						{
							"name": "Multiple File Move Scenario",
							"item": [
								{
									"name": "Login with Client User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify navigation menu before client selection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found\", function() {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Navigation",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Navigation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Navigation Using TE Url after client selection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"let teDomain = pm.environment.get(\"teUrl\");\r",
													"let i;\r",
													"let acaNav = 'My ACA Services';\r",
													"let subMenuTitle = [\"My Engagements\", \"File Exchange\"];\r",
													"let subMenuUrl = [\"/portal/engagement\", \"/portal/engagement/exchange\"];\r",
													"\r",
													"pm.test(\"Verify navigation menu for TE Url.\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('payload');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('icon');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('title');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('url');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('domain');\r",
													"    pm.expect(jsonData.payload.data).to.have.property('children');\r",
													"    pm.expect(jsonData.payload.data.children.length).to.eql(2);\r",
													"\r",
													"    for(i=0; i<jsonData.payload.data.children.length; i++) {\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('title');\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('url');\r",
													"        pm.expect(jsonData.payload.data.children[i]).to.have.property('domain');\r",
													"        \r",
													"        pm.expect(jsonData.payload.data.children[i].title).to.eql(subMenuTitle[i]);\r",
													"        pm.expect(jsonData.payload.data.children[i].url).to.eql(subMenuUrl[i]);\r",
													"        pm.expect(jsonData.payload.data.children[i].domain).to.eql(teDomain);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Navigation",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Navigation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Engagement Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Directory Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"initialize\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create First Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstFolderId\", jsonData.payload.data[0].directoryId);\r",
													"pm.environment.set(\"firstFolderName\", jsonData.payload.data[0].directoryName);\r",
													"// var rootDirectoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload First File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Second File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/TestDoc.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/TestDoc.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Third File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"thirdAssetsId\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/clientImport.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/clientImport.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondFolderId\", jsonData.payload.data[0].directoryId);\r",
													"pm.environment.set(\"secondFolderName\", jsonData.payload.data[0].directoryName);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move All Files From First To Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var firstFileId = parseInt(pm.environment.get(\"firstAssetsId\"));\r",
													"var secondFileId = parseInt(pm.environment.get(\"secondAssetsId\"));\r",
													"var thirdFileId = parseInt(pm.environment.get(\"thirdAssetsId\"));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql([]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{firstAssetsId}},\r\n            {{secondAssetsId}},\r\n            {{thirdAssetsId}}\r\n        ],\r\n        \"toDirectoryId\": {{secondFolderId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{firstFolderId}}/assets/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{firstFolderId}}",
												"assets",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload First File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"firstAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Second File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"secondAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/TestDoc.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/TestDoc.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Third File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"thirdAssetsIdDup\", jsonData.payload.data[0].id);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/clientImport.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/clientImport.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move Multiple File",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var firstFileId = parseInt(pm.environment.get(\"firstAssetsId\"));\r",
													"var secondFileId = parseInt(pm.environment.get(\"secondAssetsId\"));\r",
													"var thirdFileId = parseInt(pm.environment.get(\"thirdAssetsId\"));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify data value include duplicate file id\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).not.to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(firstFileId);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(secondFileId);\r",
													"    pm.expect(jsonData.payload.data[0]).to.include(thirdFileId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{firstAssetsId}},\r\n            {{secondAssetsId}},\r\n            {{thirdAssetsId}}\r\n        ],\r\n        \"toDirectoryId\": {{secondFolderId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{firstFolderId}}/assets/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{firstFolderId}}",
												"assets",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Replace files in destination folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetId\": {{firstAssetsId}},\r\n    \"toDirectoryId\": {{firstFolderId}},\r\n    \"actionType\": 2         //for replacing file in destination folder\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{secondFolderId}}/asset/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{secondFolderId}}",
												"asset",
												"move"
											]
										},
										"description": "Move files api for replacing files in destination file."
									},
									"response": []
								},
								{
									"name": "New Version Of Files Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetId\": {{thirdAssetsId}},\r\n    \"toDirectoryId\": {{firstFolderId}},\r\n    \"actionType\": 1         //to keep both files (original & duplicate)\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Directory/{{secondFolderId}}/asset/move",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Directory",
												"{{secondFolderId}}",
												"asset",
												"move"
											]
										},
										"description": "Move Files API for keep duplicate files in destination folders."
									},
									"response": []
								},
								{
									"name": "Delete First Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/{{firstFolderId}}",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"{{firstFolderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Second Folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/{{secondFolderId}}",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"{{secondFolderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Verify ignore file types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status, exception & keys of response\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify ignore file type is DS_Store\", function () {\r",
											"   pm.expect(jsonData.payload.data.length).to.equal(1); \r",
											"   pm.expect(jsonData.payload.data[0]).to.equal(\"DS_Store\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								},
								"description": "Verify ignore file type is DS_Store."
							},
							"response": []
						},
						{
							"name": "Verify file limit to be uploaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that file limit to be upload is 1024\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload.data).to.eql(1024);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								},
								"description": "As a client user, file limit to be uploaded."
							},
							"response": []
						},
						{
							"name": "Upload File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileId\", jsonData.payload.data[0].id);\r",
											"var rootDirectoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder uploaded into root directory\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(rootDirectoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = pm.environment.get(\"fileId\");\r",
											"var directoryName = pm.environment.get(\"directoryName\");\r",
											"var directoryValue = pm.environment.get(\"directoryValue\").toString();\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subAssets');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify uploaded file\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].id).to.eql(fileId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify root folder structure\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryTypeIdentifier).to.eql(directoryValue);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.eql(directoryName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content of downloaded file\", function() {\r",
											"    pm.expect(jsonData).to.eql(12345);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that file is deleted\",  function() {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Directory after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = pm.environment.get(\"fileId\");\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify uploaded file\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload first file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileId\", jsonData.payload.data[0].id);\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload second file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"secondFileId\", jsonData.payload.data[0].id);\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload1.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify multiple files\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[1].name).to.eql(\"upload1.txt\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that both files belongs to same folder\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[0].folderId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].subAssets[1].folderId).to.eql(directoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.environment.set(\"uploadedFolderName\", jsonData.payload.data[0].directoryName);\r",
											"pm.environment.set(\"uploadedFolderId\", jsonData.payload.data[0].directoryId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder created under root directory\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.include(\"APIFolder\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"directoryName\": \"APIFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": {{directoryValue}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create sub folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"subFolderId\", jsonData.payload.data[0].directoryId);\r",
											"pm.environment.set(\"subFolderName\", jsonData.payload.data[0].directoryName);\r",
											"\r",
											"var parentDirectoryId = pm.environment.get(\"uploadedFolderId\");\r",
											"var parentDirectoryName = pm.environment.get(\"uploadedFolderName\");\r",
											"var directoryValue = pm.environment.get(\"directoryValue\").toString();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify sub folder structure\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(parentDirectoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryPath).to.include(parentDirectoryName);\r",
											"    pm.expect(jsonData.payload.data[0].directoryTypeIdentifier).to.eql(directoryValue);\r",
											"    pm.expect(jsonData.payload.data[0].directoryType).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"APISubFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload File in First Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"fileIdToMove1\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"movedFileName1\", jsonData.payload.data[0].name);\r",
											"\r",
											"var folderId = parseInt(pm.environment.get(\"uploadedFolderId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder structure\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(folderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{uploadedFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Uploaded File To SubFolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{fileIdToMove1}}\r\n        ],\r\n        \"toDirectoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Duplicate File In First Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"dupFileId\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"dupFileName\", jsonData.payload.data[0].name);\r",
											"\r",
											"var folderId = parseInt(pm.environment.get(\"uploadedFolderId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify file name and other response parameters\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].name).to.eql(\"upload.txt\");\r",
											"    pm.expect(jsonData.payload.data[0].fileSize).not.to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0].extension).to.eql(\"txt\");\r",
											"    pm.expect(jsonData.payload.data[0].contentType).to.eql(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify folder structure\", function() {\r",
											"    pm.expect(jsonData.payload.data[0].folderId).to.eql(folderId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{uploadedFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Duplicate File To SubFolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var fileId = parseInt(pm.environment.get(\"fileIdToMove1\"));\r",
											"var dupFileId = parseInt(pm.environment.get(\"dupFileId\"));\r",
											"var dupFileName = parseInt(pm.environment.get(\"dupFileName\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify existing id of file return.\", function () {\r",
											"    pm.expect(jsonData.payload.data[0][0]).to.eql(fileId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify duplicate file id & name is not displaying.\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.not.include(dupFileId);\r",
											"    pm.expect(jsonData.payload.data).to.not.include(dupFileName);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetIds\": [\r\n            {{fileIdToMove1}}\r\n        ],\r\n        \"toDirectoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move subfolder to rootfolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"var parentDirectoryId = pm.environment.get(\"parentOfRootId\");\r",
											"var movedFolderId = pm.environment.get(\"subFolderId\");\r",
											"var movedFolderName = pm.environment.get(\"subFolderName\");\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of data response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('parentDirectoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryTypeIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subAssets');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify directoryId, parentDirectoryId, directoryName, directoryPath\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryId).to.eql(directoryId);\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(parentDirectoryId);\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.eql(\"U.S. Reg\");\r",
											"    pm.expect(jsonData.payload.data[0].directoryPath).to.eql(\"/CA-Exchange/U.S. Reg\");\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryTypeIdentifier');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify moved folder is inside subDirectories of rootfolder\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryId).to.eql(movedFolderId);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryName).to.eql(movedFolderName);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].parentDirectoryId).to.eql(directoryId);\r",
											"    var directoryPath = \"/CA-Exchange/U.S. Reg/\"+movedFolderName;\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1].directoryPath).to.eql(directoryPath);\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('directoryType');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('directoryTypeIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0].subDirectories[1]).to.have.property('subAssets');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"newParentId\": {{rootDirectoryId}},\r\n        \"directoryId\": {{subFolderId}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryIds\": [\r\n            {{uploadedFolderId}}\r\n        ],\r\n        \"assetIds\": []\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var directoryId = parseInt(pm.environment.get(\"rootDirectoryId\"));\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.expect(jsonData.payload.data[0].directoryName).to.include(\"RenamedFolder\");\r",
											"    pm.expect(jsonData.payload.data[0].parentDirectoryId).to.eql(directoryId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"RenamedFolder{{$randomInt}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{uploadedFolderId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{uploadedFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete multiple files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('subDirectories');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('directoryType');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that file is deleted\",  function() {\r",
											"    pm.expect(jsonData.payload.data[0].subAssets).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subfolder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{subFolderId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{subFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client User Log Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "MS Teams",
					"item": [
						{
							"name": "Support User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set(\"currentDate\", moment().format(\"YYYY-MM-DD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"username\": \"{{UserName}}\",\n        \"password\": \"{{password}}\",\n        \"stayLoggedIn\": false,\n        \"actor\": \"eyJyZWZlcnJlciI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MC4wLjM5ODcuMTQ5IFNhZmFyaS81MzcuMzYifQ==\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/Login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
											"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
											"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
											"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that client is selected successfully\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"Authentication",
										"ClientSelection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login to Microsoft account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"tokenForGraphAPI\", jsonData.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{azureClientId}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{azureClientSecret}}",
											"type": "text"
										},
										{
											"key": "resource",
											"value": "https://graph.microsoft.com",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://login.microsoftonline.com/{{azureTenantId}}/oauth2/token",
									"protocol": "https",
									"host": [
										"login",
										"microsoftonline",
										"com"
									],
									"path": [
										"{{azureTenantId}}",
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var teamId = pm.environment.get(\"teamsId\");\r",
											"var clientName = pm.environment.get(\"clientNameForTeams\")\r",
											"\r",
											"var index = jsonData.value.map(\r",
											"    function (data) {\r",
											"        return data.id\r",
											"    }).indexOf(teamId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"On creating new Engagement, MS Team should only be created if there is no pre-existing Team for the Client in MS Teams.\", function() {\r",
											"    pm.expect(jsonData.value[index].displayName).to.include(clientName);\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0//users/{{teamsUserId}}/joinedTeams",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"",
										"users",
										"{{teamsUserId}}",
										"joinedTeams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var clientUser = pm.environment.get(\"nonAcaUserForTeams\");\r",
											"var otherConsUserMail = pm.environment.get(\"secondAcaUserForTeams\");\r",
											"var otherConsUserName = pm.environment.get(\"otherConsUserName\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var otherUserIndex = jsonData.value.map(\r",
											"    function (value) {\r",
											"        return value.displayName\r",
											"}).indexOf(otherConsUserName);\r",
											"\r",
											"pm.test(\"Verify Client user from an engagement shouldn't be added as Team member to the Team\", function() {\r",
											"    pm.expect(JSON.stringify(jsonData.value)).to.not.include(\"Ashish Singh\");\r",
											"    pm.expect(JSON.stringify(jsonData.value)).to.not.include(clientUser);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Other Consultant user from an engagement should be added as Team member to the Team\", function() {\r",
											"    pm.expect(jsonData.value[otherUserIndex].displayName).to.eql(otherConsUserName);\r",
											"    pm.expect(jsonData.value[otherUserIndex].mail).to.eql(otherConsUserMail);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Support user should not be added as member of team.\", function() {\r",
											"    pm.expect(JSON.stringify(jsonData.value)).to.not.include(\"Jordan Schwartz\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/groups/{{teamsId}}/members",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"groups",
										"{{teamsId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Owner of Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Owner of teams is the lead consultant user\", function() {\r",
											"    pm.expect(jsonData.value[0].displayName).to.eql(\"Test User\");\r",
											"    pm.expect(jsonData.value[0].mail).to.eql(\"tuser@acateche5.onmicrosoft.com\");\r",
											"    // This code will be used- when it'll updated by dev side\r",
											"    // pm.expect(jsonData.value[0].displayName).to.eql(pm.environment.get(\"teamOwner\"));\r",
											"    // pm.expect(jsonData.value[0].mail).to.eql(pm.environment.get(\"acaUserForTeams\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/groups/{{teamsId}}/owners",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"groups",
										"{{teamsId}}",
										"owners"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Channels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var engId = parseInt(pm.environment.get(\"engagementId\"));\r",
											"var clientId = pm.environment.get(\"clientIdForTeams\");\r",
											"var channelId = pm.environment.get(\"channelId\");\r",
											"\r",
											"// pm.environment.set(\"channelId\", jsonData.value[0].id);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify channels\", function() {\r",
											"    pm.expect(jsonData.value[0].id).to.eql(channelId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, 40000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/v1.0/teams/{{teamsId}}/channels",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"v1.0",
										"teams",
										"{{teamsId}}",
										"channels"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get drive of General Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"generalDriveId\", jsonData.parentReference.driveId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/groups/{{teamsId}}/drive/items/root:/General",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"groups",
										"{{teamsId}}",
										"drive",
										"items",
										"root:",
										"General"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get drive of US Reg Channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"usRegDriveId\", jsonData.parentReference.driveId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/groups/{{teamsId}}/drive/items/root:/^U.S. Reg",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"groups",
										"{{teamsId}}",
										"drive",
										"items",
										"root:",
										"^U.S. Reg"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deltek Codes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"const moment = require('moment');\r",
											"\r",
											"var uploadedFolder = pm.environment.get(\"uploadedFolderName\");\r",
											"var engName = pm.environment.get(\"engagementName\");\r",
											"\r",
											"var deltekcode = engName + \" - \" + moment().format(\"MM - YYYY\") + \"-SF-Deltek Codes.txt\";\r",
											"\r",
											"var deltekIndex = jsonData.value.map(\r",
											"    function (value) {\r",
											"        return value.name\r",
											"}).indexOf(deltekcode);\r",
											"\r",
											"console.log(deltekIndex);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify U.S. Reg folder present under CA-Exchange\", function() {\r",
											"    pm.expect(jsonData.value[deltekIndex].name).to.eql(deltekcode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/groups/{{teamsId}}/drives/{{usRegDriveId}}/root:/^U.S. Reg/Administrative:/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"groups",
										"{{teamsId}}",
										"drives",
										"{{usRegDriveId}}",
										"root:",
										"^U.S. Reg",
										"Administrative:",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Folder name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"var folderIndex = jsonData.value.map(\r",
											"    function (value) {\r",
											"        return value.name\r",
											"}).indexOf(\"U.S. Reg\");\r",
											"\r",
											"if(folderIndex === -1) {\r",
											"    setTimeout(() => {}, 5000);\r",
											"    postman.setNextRequest(\"Get Folder name\");\r",
											"} else {\r",
											"    pm.test(\"Verify U.S. Reg folder present under CA-Exchange\", function() {\r",
											"        pm.expect(jsonData.value[folderIndex].name).to.eql(\"U.S. Reg\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/groups/{{teamsId}}/drives/{{generalDriveId}}/root:/General/CA-Exchange:/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"groups",
										"{{teamsId}}",
										"drives",
										"{{generalDriveId}}",
										"root:",
										"General",
										"CA-Exchange:",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Folder in Alpha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"uploadedFolderName\", jsonData.payload.data[0].directoryName);\r",
											"pm.environment.set(\"uploadedFolderId\", jsonData.payload.data[0].directoryId);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"directoryName\": \"APIFolder{{$randomInt}}\",\r\n        \"directoryType\": 2,\r\n        \"directoryTypeIdentifier\": {{directoryValue}}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created folder name in Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"var uploadedFolder = pm.environment.get(\"uploadedFolderName\");\r",
											"\r",
											"var folderIndex = jsonData.value.map(\r",
											"    function (value) {\r",
											"        return value.name\r",
											"    }).indexOf(uploadedFolder);\r",
											"\r",
											"if(folderIndex === -1) {\r",
											"    setTimeout(() => {}, 5000);\r",
											"    postman.setNextRequest(\"Get created folder name in Teams\");\r",
											"} else {\r",
											"    pm.test(\"Verify that status code is 200\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify U.S. Reg folder present under CA-Exchange\", function() {\r",
											"        pm.expect(jsonData.value[folderIndex].name).to.eql(uploadedFolder);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(function(){}, 40000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/groups/{{teamsId}}/drives/{{generalDriveId}}/root:/General/CA-Exchange/U.S. Reg:/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"groups",
										"{{teamsId}}",
										"drives",
										"{{generalDriveId}}",
										"root:",
										"General",
										"CA-Exchange",
										"U.S. Reg:",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rename Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"uploadedFolderName\", jsonData.payload.data[0].directoryName);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"directoryId\": {{uploadedFolderId}},\r\n        \"directoryName\": \"RenamedFolder{{$randomInt}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Renamed folder in Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"var uploadedFolder = pm.environment.get(\"uploadedFolderName\");\r",
											"\r",
											"var renameFolderIndex = jsonData.value.map(\r",
											"    function (value) {\r",
											"        return value.name\r",
											"    }).indexOf(uploadedFolder);\r",
											"\r",
											"if(renameFolderIndex === -1) {\r",
											"    setTimeout(() => {}, 5000);\r",
											"    postman.setNextRequest(\"Verify Renamed folder in Teams\");\r",
											"} else {\r",
											"    pm.test(\"Verify that status code is 200\", function() {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify folder is renamed\", function() {\r",
											"        pm.expect(jsonData.value[renameFolderIndex].name).to.eql(uploadedFolder);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta/groups/{{teamsId}}/drives/{{generalDriveId}}/root:/General/CA-Exchange/U.S. Reg:/children",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"groups",
										"{{teamsId}}",
										"drives",
										"{{generalDriveId}}",
										"root:",
										"General",
										"CA-Exchange",
										"U.S. Reg:",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ComplianceAlpha Tab",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"channelId\", jsonData.value[0].id);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify ComplianceAlpha tab\", function() {\r",
											"    pm.expect(jsonData.value[1].displayName).to.eql(\"ComplianceAlpha\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenForGraphAPI}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://graph.microsoft.com/beta//teams/{{teamsId}}/channels/{{channelId}}/tabs",
									"protocol": "https",
									"host": [
										"graph",
										"microsoft",
										"com"
									],
									"path": [
										"beta",
										"",
										"teams",
										"{{teamsId}}",
										"channels",
										"{{channelId}}",
										"tabs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Assets-API",
					"item": [
						{
							"name": "Asset Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"assetUploadId\", jsonData.payload.data[0].id);\r",
											"pm.environment.set(\"assetFileIdentifier\", jsonData.payload.data[0].fileIdentifier);\r",
											"pm.environment.set(\"assetName\", jsonData.payload.data[0].name);\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys\", function () {\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('name');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('clientName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('friendlyName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('teamFolderPath');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileIdentifier');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('fileSize');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('folderId');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('folderName');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('extension');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('requestNumber');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('status');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('teamsUrl');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedDate');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('uploadedBy');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('contentType');\r",
											"    pm.expect(jsonData.payload.data[0]).to.have.property('buffer');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Asset Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Asset Downloaded Value\", function() {\r",
											"    pm.expect(jsonData).to.eql(678910);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"fileIdentifiers\": [\r\n      \"{{assetFileIdentifier}}\"\r\n    ],\r\n    \"ids\": [\r\n      {{assetUploadId}}\r\n    ],\r\n    \"name\": \"{{assetName}}\",\r\n    \"folderId\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Assets-v1-Service-Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"engagementId\": {{engagementId}},\r\n        \"divisions\": [\r\n            1\r\n        ],\r\n        \"assetsToAdd\": [\r\n            {{assetUploadId}}\r\n        ],\r\n        \"assetsToRemove\": [\r\n            0\r\n        ],\r\n        \"requestFolderId\": 0,\r\n        \"duplicateAssets\": [\r\n            0\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Assets-v2-service-upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData.payload.data[0]).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"assetsToAdd\": [\r\n      {{assetUploadId}}\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v2",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status & exception value\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data keys response\", function () {\r",
											"    for(var i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('id');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('name');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('clientName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('friendlyName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('teamFolderPath');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('fileIdentifier');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('fileSize');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('folderId');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('folderName');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('extension');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('requestNumber');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('status');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('teamsUrl');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('uploadedDate');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('uploadedBy');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('contentType');\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property('buffer');\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"history"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add User Scenario On File Exchange",
					"item": [
						{
							"name": "Client User",
							"item": [
								{
									"name": "Login with Client User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Engagement Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Directory Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"initialize\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Security Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-591\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify availableUserSecurityRoles are Manage Engagements & Client\", function () {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify both roles is present in assignedUserSecurityRoles after assigning both role\", function () {\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[1])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"userId\": {{acaUserIdTeams}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"GetUserSecurityRoles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-591\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"clientId\": {{clientIdForTeams}}\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/users/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"users",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add User On File Exchange Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-591\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of data\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('id');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('clientId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('name');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('salesforceOpportunityId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('deltekProjectId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('isPrivileged');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('notes');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('status');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('isActive');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('division');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('teamsInfo');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('aca');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('client');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('createdDate');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('createdByUser');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('lastModifiedDate');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('lastModifiedByUser');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('canViewEngagementDetails');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"engagementId\": {{engagementId}},\r\n    \"acaLeadUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"acaConsultantUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"clientLeadUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"clientUsersToAdd\": [\r\n      {{nonACAUserId}}, {{nonUserAcaId}}\r\n    ],\r\n    \"acaLeadUsersToRemove\": [\r\n      0\r\n    ],\r\n    \"clientLeadUsersToRemove\": [\r\n      0\r\n    ]    \r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"adduser"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Consultant User",
							"item": [
								{
									"name": "Login with Consultant User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Engagement Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.environment.set(\"rootDirectoryId\", jsonData.payload.data[0].aca.division.directoryId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Directory Read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"initialize\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable Teams Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that status value is 1 & exception is null\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"userSetting\": {\r\n            \"engagementId\": {{engagementId}},\r\n            \"userId\": {{acaUserIdTeams}},\r\n            \"disableTeamsNotification\": true\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/setting/save",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"setting",
												"save"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Teams Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that status value is 1 & exception is null\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data).to.eql(true);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"userSetting\": {\r\n            \"engagementId\": {{engagementId}},\r\n            \"userId\": {{acaUserIdTeams}},\r\n            \"disableTeamsNotification\": false\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/setting/save",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"setting",
												"save"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Security Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-591\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify availableUserSecurityRoles are Manage Engagements & Client\", function () {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify both roles is present in assignedUserSecurityRoles after assigning both role\", function () {\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[1])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"userId\": {{acaUserIdTeams}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"GetUserSecurityRoles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-591\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"clientId\": {{clientIdForTeams}}\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/users/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"users",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add User In Engagement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-591\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of data\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('id');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('clientId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('name');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('salesforceOpportunityId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('deltekProjectId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('isPrivileged');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('notes');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('status');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('isActive');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('division');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('teamsInfo');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('aca');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('client');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('createdDate');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('createdByUser');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('lastModifiedDate');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('lastModifiedByUser');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('canViewEngagementDetails');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"engagementId\": {{engagementId}},\r\n    \"acaLeadUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"acaConsultantUsersToAdd\": [\r\n      {{acaUserIdTeams}}, {{acaUserId}}\r\n    ],\r\n    \"clientLeadUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"clientUsersToAdd\": [\r\n      {{nonACAUserId}}, {{nonUserAcaId}}\r\n    ],\r\n    \"acaLeadUsersToRemove\": [\r\n      0\r\n    ],\r\n    \"clientLeadUsersToRemove\": [\r\n      0\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"adduser"
											]
										}
									},
									"response": []
								},
								{
									"name": "ReadUser- Check if user is not existing then empty array is return",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-612\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify no record is return if username is not already existing in alpha to other tenant.\", function () {\r",
													"    pm.expect(jsonData.payload.data.length).to.equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"somerandom@360logica.com\"\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/readuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"readuser"
											]
										},
										"description": "Verify no record is return if username is not already existing in alpha to other tenant"
									},
									"response": []
								},
								{
									"name": "Create Non ACA User From File Exchange Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-612\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var todaydate=new Date();\r",
													"var random=todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
													"\r",
													"pm.environment.set('userNameNA', 'UserN'+random+'@360logica.com');\r",
													"pm.environment.set('firstNameNA', 'UserN');\r",
													"pm.environment.set('lastNameNA', random);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{userNameNA}}\",\r\n        \"firstName\": \"{{firstNameNA}}\",\r\n        \"lastName\": \"{{lastNameNA}}\",\r\n        \"displayName\": \"{{firstNameNA}} {{lastNameNA}}\",\r\n        \"email\": \"{{emailId}}\",\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/createuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"createuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Non ACA User Is Added To Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var userIndex = jsonData.payload.data.map(\r",
													"    function (data) {\r",
													"        return data.basicInfo.username\r",
													"    }).indexOf(pm.environment.get('userNameNA'));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that created NON user is found in tenant.\", function () {\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.firstName).to.eql(pm.environment.get('firstNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.lastName).to.eql(pm.environment.get('lastNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.username).to.eql(pm.environment.get('userNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.displayName).to.eql(pm.environment.get('firstNameNA')+' '+pm.environment.get('lastNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.isAcaEmployee).to.eql(false);\r",
													"    pm.environment.set('NewNonAcaUser',jsonData.payload.data[userIndex].basicInfo.userId);\r",
													"    console.log(\"New Non-ACA User Id- \",jsonData.payload.data[userIndex].basicInfo.userId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"sortOption\": {\r\n            \"column\": \"FullName\",\r\n            \"direction\": 1\r\n        },\r\n        \"filterOption\": {\r\n            \"showNonAcaUsersOnly\": true,\r\n            \"groups\": [],\r\n            \"products\": []\r\n        },\r\n        \"pagingOption\": {\r\n            \"offset\": 0,\r\n            \"limit\": 50\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/user/read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"user",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ACA User From File Exchange Page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var todaydate=new Date();\r",
													"var random='c'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
													"\r",
													"pm.environment.set('userNameA', 'UserN'+random+'@360logica.com');\r",
													"pm.environment.set('firstNameA', 'UserN');\r",
													"pm.environment.set('lastNameA', random);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-612\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{userNameA}}\",\r\n        \"firstName\": \"{{firstNameA}}\",\r\n        \"lastName\": \"{{lastNameA}}\",\r\n        \"displayName\": \"{{firstNameA}} {{lastNameA}}\",\r\n        \"email\": \"{{emailId}}\",\r\n        \"isAcaEmployee\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/createuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"createuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify ACA User Is Added To Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var userIndex = jsonData.payload.data.map(\r",
													"    function (data) {\r",
													"        return data.basicInfo.username\r",
													"    }).indexOf(pm.environment.get('userNameA'));\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that created ACA user is found in tenant.\", function () {\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.firstName).to.eql(pm.environment.get('firstNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.lastName).to.eql(pm.environment.get('lastNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.username).to.eql(pm.environment.get('userNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.displayName).to.eql(pm.environment.get('firstNameA')+' '+pm.environment.get('lastNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].basicInfo.isAcaEmployee).to.eql(true);\r",
													"    pm.environment.set('NewAcaUser',jsonData.payload.data[userIndex].basicInfo.userId);\r",
													"    console.log(\"New ACA User Id- \",jsonData.payload.data[userIndex].basicInfo.userId);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"sortOption\": {\r\n            \"column\": \"FullName\",\r\n            \"direction\": 1\r\n        },\r\n        \"filterOption\": {\r\n            \"groups\": [],\r\n            \"products\": [],\r\n            \"showAcaUsersOnly\": true\r\n        },\r\n        \"pagingOption\": {\r\n            \"offset\": 0,\r\n            \"limit\": 50\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/user/read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"user",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read User After Creating New Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var userIndex;\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify ACA created users present\", function () {\r",
													"    userIndex = jsonData.payload.data.map(\r",
													"    function (data) {\r",
													"        return data.userId\r",
													"    }).indexOf(pm.environment.get('NewAcaUser'));\r",
													"\r",
													"    pm.expect(jsonData.payload.data[userIndex].firstName).to.eql(pm.environment.get('firstNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].lastName).to.eql(pm.environment.get('lastNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].displayName).to.eql(pm.environment.get('firstNameA')+' '+pm.environment.get('lastNameA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].isAcaEmployee).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify NON-ACA created users present\", function () {\r",
													"    userIndex = jsonData.payload.data.map(\r",
													"    function (data) {\r",
													"        return data.userId\r",
													"    }).indexOf(pm.environment.get('NewNonAcaUser'));\r",
													"\r",
													"    pm.expect(jsonData.payload.data[userIndex].firstName).to.eql(pm.environment.get('firstNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].lastName).to.eql(pm.environment.get('lastNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].displayName).to.eql(pm.environment.get('firstNameNA')+' '+pm.environment.get('lastNameNA'));\r",
													"    pm.expect(jsonData.payload.data[userIndex].isAcaEmployee).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"clientId\": {{clientIdForTeams}}\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/users/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"users",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Get User Security Roles for newly created non-aca users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify availableUserSecurityRoles are Manage Engagements & Client\", function () {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Client\"]);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify default ACA services roles is assigned to newly created user.\", function () {\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(\"Client\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"userId\": {{NewNonAcaUser}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"GetUserSecurityRoles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Get User Security Roles for newly created aca users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status & exception value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify availableUserSecurityRoles are Manage Engagements & Consultants\", function () {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[0])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles[1])\r",
													"    .to.be.oneOf([\"Manage Engagements\", \"Consultant\"]);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify role count present of availableUserSecurityRoles & assignedUserSecurityRoles\", function() {\r",
													"    pm.expect(jsonData.payload.data.availableUserSecurityRoles.length).to.eql(2);\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles.length).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify default ACA services roles is assigned to newly created user.\", function () {\r",
													"    pm.expect(jsonData.payload.data.assignedUserSecurityRoles[0]).to.eql(\"Consultant\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"userId\": {{NewAcaUser}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"GetUserSecurityRoles"
											]
										}
									},
									"response": []
								},
								{
									"name": "ReadUser- Check user existing in tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-612\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of data response\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('id');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('userId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('firstName');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('lastName');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('displayName');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('userName');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('email');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('isTwofactorRequired');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('externalReferenceId');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('isAcaEmployee');\r",
													"    pm.expect(jsonData.payload.data[0]).to.have.property('fullName');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify userid, email & username\", function () {\r",
													"    pm.expect(jsonData.payload.data[0].userId).to.equal(parseInt(pm.environment.get('acaUserIdTeams')));\r",
													"    pm.expect(jsonData.payload.data[0].userName).to.equal(pm.environment.get('acaUserForTeams'));\r",
													"    pm.expect(jsonData.payload.data[0].email).to.equal(pm.environment.get('acaUserForTeams'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"email\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/readuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"readuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove User From Engagement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-623\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"engagementId\": {{engagementId}},\r\n    \"usersToRemove\": [\r\n      {{acaUserId}},\r\n      {{nonACAUserId}}\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"removeuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Removed User Is Not Found In Engagement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var engId = parseInt(pm.environment.get(\"engagementId\"));\r",
													"\r",
													"var engIndex = jsonData.payload.data.map(\r",
													"    function (data) {\r",
													"        return data.id\r",
													"    }).indexOf(engId);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify removed user is not present in engagement.\", function() {\r",
													"    var i;\r",
													"    console.log(jsonData.payload.data[0].aca.leadUsers.length);\r",
													"    console.log(jsonData.payload.data[0].aca.consultantUsers.length);\r",
													"    console.log(jsonData.payload.data[0].client.leadUsers.length);\r",
													"    console.log(jsonData.payload.data[0].client.clientUsers.length);\r",
													"    for(i=0; i<jsonData.payload.data[0].aca.leadUsers.length; i++){\r",
													"        pm.expect(jsonData.payload.data[0].aca.leadUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('acaUserId')));\r",
													"        pm.expect(jsonData.payload.data[0].aca.leadUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('nonACAUserId')));\r",
													"    }\r",
													"    for(i=0; i<jsonData.payload.data[0].aca.consultantUsers.length; i++){\r",
													"        pm.expect(jsonData.payload.data[0].aca.consultantUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('acaUserId')));\r",
													"        pm.expect(jsonData.payload.data[0].aca.consultantUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('nonACAUserId')));\r",
													"    }\r",
													"    for(i=0; i<jsonData.payload.data[0].client.clientUsers.length; i++){\r",
													"        pm.expect(jsonData.payload.data[0].client.clientUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('acaUserId')));\r",
													"        pm.expect(jsonData.payload.data[0].client.clientUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('nonACAUserId')));\r",
													"    }\r",
													"    for(i=0; i<jsonData.payload.data[0].client.leadUsers.length; i++){\r",
													"        pm.expect(jsonData.payload.data[0].client.leadUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('acaUserId')));\r",
													"        pm.expect(jsonData.payload.data[0].client.leadUsers[i])\r",
													"            .not.to.eql(parseInt(pm.environment.get('nonACAUserId')));    \r",
													"    }\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"ids\": [],\n        \"filterOption\": {\n            \"clientIds\": [\n                {{clientIdForTeams}}\n            ]\n        },\n        \"sortOption\": {\n            \"column\": \"Name\",\n            \"direction\": 1\n        },\n        \"pagingOption\": {\n            \"offset\": 0,\n            \"limit\": 50\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove ACA Services For User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify status, exception & data value\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of data response\", function () {\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"userIds\": [\r\n            {{acaUserId}},\r\n            {{nonACAUserId}},\r\n            {{nonUserAcaId}},\r\n            {{acaUserIdTeams2}}\r\n        ],\r\n        \"engagementId\": {{engagementId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"removeacaservice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify ACA Service module is disable for removed users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"let i;\r",
													"let j;\r",
													"\r",
													"let users = [\r",
													"    parseInt(pm.environment.get(\"acaUserId\")),\r",
													"    parseInt(pm.environment.get(\"nonACAUserId\")),\r",
													"    parseInt(pm.environment.get(\"nonUserAcaId\")),\r",
													"    parseInt(pm.environment.get(\"acaUserIdTeams2\"))\r",
													"];\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify ACA Service module is disable for removed users.\", function () {\r",
													"    pm.expect(jsonData.payload.data.length).to.eql(4);\r",
													"    for(i=0; i<users.length; i++) {\r",
													"        var userIndex = jsonData.payload.data.map(function (data) {\r",
													"                return data.basicInfo.userId\r",
													"            }).indexOf(users[i]);\r",
													"        \r",
													"        for(j=0; j<jsonData.payload.data[userIndex].products.length; j++) {\r",
													"            pm.expect(jsonData.payload.data[userIndex].products[j].name).not.to.contain('ACA Services');\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{acaUserId}},\r\n            {{nonACAUserId}},\r\n            {{nonUserAcaId}},\r\n            {{acaUserIdTeams2}}\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/user/read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"user",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Removed ACA Services user is removed from an engagement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"let users = [\r",
													"    parseInt(pm.environment.get(\"acaUserId\")),\r",
													"    parseInt(pm.environment.get(\"nonACAUserId\")),\r",
													"    parseInt(pm.environment.get(\"nonUserAcaId\")),\r",
													"    parseInt(pm.environment.get(\"acaUserIdTeams2\"))\r",
													"];\r",
													"let engId = parseInt(pm.environment.get(\"engagementId\"));\r",
													"let i, j;\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify removed user is not present in engagement.\", function() {\r",
													"    let engIndex = jsonData.payload.data.map(\r",
													"    function (data) {\r",
													"        return data.id\r",
													"    }).indexOf(engId);\r",
													"\r",
													"    for(i=0; i<jsonData.payload.data[engIndex].aca.leadUsers.length; i++){\r",
													"        for(j=0; j<users.length; j++) {\r",
													"            pm.expect(jsonData.payload.data[engIndex].aca.leadUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"            pm.expect(jsonData.payload.data[engIndex].aca.leadUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"        }\r",
													"    }\r",
													"    for(i=0; i<jsonData.payload.data[engIndex].aca.consultantUsers.length; i++){\r",
													"        for(j=0; j<users.length; j++) {\r",
													"            pm.expect(jsonData.payload.data[engIndex].aca.consultantUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"            pm.expect(jsonData.payload.data[engIndex].aca.consultantUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"        }\r",
													"    }\r",
													"    for(i=0; i<jsonData.payload.data[engIndex].client.clientUsers.length; i++){\r",
													"        for(j=0; j<users.length; j++) {\r",
													"            pm.expect(jsonData.payload.data[engIndex].client.clientUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"            pm.expect(jsonData.payload.data[engIndex].client.clientUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"        }\r",
													"    }\r",
													"    for(i=0; i<jsonData.payload.data[engIndex].client.leadUsers.length; i++) {\r",
													"        for(j=0; j<users.length; j++) {\r",
													"            pm.expect(jsonData.payload.data[engIndex].client.leadUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"            pm.expect(jsonData.payload.data[engIndex].client.leadUsers[i])\r",
													"                .not.to.eql(users[j]);\r",
													"        }\r",
													"    }\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"ids\": [],\n        \"filterOption\": {\n            \"clientIds\": [\n                {{clientIdForTeams}}\n            ]\n        },\n        \"sortOption\": {\n            \"column\": \"Name\",\n            \"direction\": 1\n        },\n        \"pagingOption\": {\n            \"offset\": 0,\n            \"limit\": 50\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Re Send Activation Mail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// https://acaalpha.atlassian.net/browse/ACATE-622\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData).to.have.property('status');\r",
													"    pm.expect(jsonData).to.have.property('exception');\r",
													"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
													"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
													"    pm.expect(jsonData.payload).to.have.property('data');\r",
													"    pm.expect(jsonData.payload.data[0]).to.eql(true);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"userId\": {{acaUserIdTeams}}\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/sendactivationemail",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"sendactivationemail"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Beta Features",
			"item": [
				{
					"name": "Support User",
					"item": [
						{
							"name": "Support User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payload\": {\n        \"username\": \"{{UserName}}\",\n        \"password\": \"{{password}}\",\n        \"stayLoggedIn\": false,\n        \"actor\": \"eyJyZWZlcnJlciI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MC4wLjM5ODcuMTQ5IFNhZmFyaS81MzcuMzYifQ==\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/Login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Beta-Features Read Before Adding Users & Beta Feature Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data should have various attributes\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    // pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    // pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    // pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    // pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								},
								"description": "Test Case Id: 310263\r\nAs a support user, I am able to get all beta-testor users & featureId value if exists.\r\n-> Verify status, exception & data value\r\n-> Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\r\n-> Verify data should have various attributes\r\n   => id\r\n   => version\r\n   => betaTesters\r\n   => betaFeatures\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n   => lastModifiedDate\r\n   => lastModifiedByUser\r\n   => isDeleted\r\n   => key\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser"
							},
							"response": []
						},
						{
							"name": "Beta features, Add Feature Id value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data should have various attributes\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isActive');\r",
											"    pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.isActive).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Feature Id Value\", function () {\r",
											"    // pm.expect(jsonData.payload.data.betaTesters.length).to.eql(2);\r",
											"    // pm.expect(jsonData.payload.data.betaFeature).to.eql(pm.environment.get(\"featureIdValue\"));\r",
											"    pm.expect(jsonData.payload.data.betaTesters.length).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data.betaTesters[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[1]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.payload.data.betaFeature).to.eql(pm.environment.get(\"featureIdValue\"));\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"pm.environment.set(\"featureIdValue\", \"f010-\"+moment().format(\"YYYYMMDDhmmssa\")+\"-sdlks\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								},
								"description": "Test Case Id: 310264\r\nAs a support user, I am able to add beta featureId.\r\n-> Verify status, exception & data value\r\n-> Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\r\n-> Verify data should have various attributes\r\n   => id\r\n   => version\r\n   => betaTesters\r\n   => betaFeatures\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n   => lastModifiedDate\r\n   => lastModifiedByUser\r\n   => isDeleted\r\n   => key\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n-> Verify Feature Id Value"
							},
							"response": []
						},
						{
							"name": "Beta Features, Add multiple beta-testers user id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require('moment');\r",
											"\r",
											"// pm.environment.set(\"betaUserId0\", parseInt(moment().format(\"mmss\")+\"0\"));\r",
											"// pm.environment.set(\"betaUserId1\", parseInt(moment().format(\"mmss\")+\"1\"));\r",
											"// pm.environment.set(\"betaUserId2\", parseInt(moment().format(\"mmss\")+\"2\"));\r",
											"// pm.environment.set(\"betaUserId3\", parseInt(moment().format(\"mmss\")+\"3\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data response\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isActive');\r",
											"    pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.isActive).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Beta Testers User Id\", function () {\r",
											"    pm.expect(jsonData.payload.data.betaTesters.length).to.eql(3);\r",
											"    pm.expect(jsonData.payload.data.betaTesters[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[1]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[2]).to.eql(parseInt(pm.environment.get(\"acaUserId\")));\r",
											"    pm.expect(jsonData.payload.data.betaFeature).to.eql(pm.environment.get(\"featureIdValue\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {  \r\n        \"UserIds\" : [{{acaUserId}}],\r\n\t\t\"featureId\" : \"{{featureIdValue}}\",\r\n        \"isActive\" : true\r\n      }\r\n}\r\n// For providing any user access to findings menu- on qa env\r\n// {\r\n//     \"payload\": {  \r\n//         \"UserIds\" : [6428],\r\n// \t\t\"featureId\" : \"65df59d2-e25d-4446-a244-4605770ae269\"\r\n//       }\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								},
								"description": "Test Case Id: 310265\r\nAs a support user, I am able to add multiple beta-testers user id\r\n-> Verify status, exception & data value\r\n-> Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\r\n-> Verify data should have various attributes\r\n   => id\r\n   => version\r\n   => betaTesters\r\n   => betaFeatures\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n   => lastModifiedDate\r\n   => lastModifiedByUser\r\n   => isDeleted\r\n   => key\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n-> Verify Beta Testers User Id\r\n"
							},
							"response": []
						},
						{
							"name": "Beta Features, Update status to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data response\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isActive');\r",
											"    pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Beta Testers User Id & isActive value.\", function () {\r",
											"    pm.expect(jsonData.payload.data.betaTesters.length).to.eql(3);\r",
											"    pm.expect(jsonData.payload.data.betaTesters[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[1]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[2]).to.eql(parseInt(pm.environment.get(\"acaUserId\")));\r",
											"    pm.expect(jsonData.payload.data.betaFeature).to.eql(pm.environment.get(\"featureIdValue\"));\r",
											"    pm.expect(jsonData.payload.data.isActive).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require('moment');\r",
											"\r",
											"// pm.environment.set(\"betaUserId0\", parseInt(moment().format(\"mmss\")+\"0\"));\r",
											"// pm.environment.set(\"betaUserId1\", parseInt(moment().format(\"mmss\")+\"1\"));\r",
											"// pm.environment.set(\"betaUserId2\", parseInt(moment().format(\"mmss\")+\"2\"));\r",
											"// pm.environment.set(\"betaUserId3\", parseInt(moment().format(\"mmss\")+\"3\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {  \r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}, {{acaUserId}}],\r\n\t\t\"featureId\" : \"{{featureIdValue}}\",\r\n        \"isActive\" : false\r\n      }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								},
								"description": "Test Case Id: https://testims.testrail.io/index.php?/cases/view/372076\r\nAs a support user, I am able to disable the status for users and feature id"
							},
							"response": []
						},
						{
							"name": "Beta Features, Update status to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data response\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isActive');\r",
											"    pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Beta Testers User Id & isActive value.\", function () {\r",
											"    pm.expect(jsonData.payload.data.betaTesters.length).to.eql(3);\r",
											"    pm.expect(jsonData.payload.data.betaTesters[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[1]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.payload.data.betaTesters[2]).to.eql(parseInt(pm.environment.get(\"acaUserId\")));\r",
											"    pm.expect(jsonData.payload.data.betaFeature).to.eql(pm.environment.get(\"featureIdValue\"));\r",
											"    pm.expect(jsonData.payload.data.isActive).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require('moment');\r",
											"\r",
											"// pm.environment.set(\"betaUserId0\", parseInt(moment().format(\"mmss\")+\"0\"));\r",
											"// pm.environment.set(\"betaUserId1\", parseInt(moment().format(\"mmss\")+\"1\"));\r",
											"// pm.environment.set(\"betaUserId2\", parseInt(moment().format(\"mmss\")+\"2\"));\r",
											"// pm.environment.set(\"betaUserId3\", parseInt(moment().format(\"mmss\")+\"3\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {  \r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}, {{acaUserId}}],\r\n\t\t\"featureId\" : \"{{featureIdValue}}\",\r\n        \"isActive\" : true\r\n      }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								},
								"description": "Test Case Id: https://testims.testrail.io/index.php?/cases/view/372076\r\nAs a support user, I am able to enable the status for users and feature id"
							},
							"response": []
						},
						{
							"name": "Beta-Features, Remove Beta-Tester Users Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify keys of response\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data response\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isActive');\r",
											"    pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Beta Tester User Id is removed\", function () {\r",
											"    // pm.expect(jsonData.payload.data.betaFeature).to.eql(2);\r",
											"    pm.expect(jsonData.payload.data.betaTesters.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userIds\": [\r\n      {{acaUserId}}, {{acaUserIdTeams}}, {{acaUserIdTeams2}}\r\n    ],\r\n    \"featureId\" : \"{{featureIdValue}}\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								},
								"description": "Test Case Id: 310268\r\nAs a support user, I am able to remove beta-tester users id\r\n-> Verify status, exception & data value\r\n-> Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\r\n-> Verify data should have various attributes\r\n   => id\r\n   => version\r\n   => betaTesters\r\n   => betaFeatures\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n   => lastModifiedDate\r\n   => lastModifiedByUser\r\n   => isDeleted\r\n   => key\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n-> Verify Beta Tester User Id is removed\r\n"
							},
							"response": []
						},
						{
							"name": "Beta-Features, Remove feature id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify status, exception & data value\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\", function () {\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('exception');\r",
											"    pm.expect(jsonData).to.have.property('requestTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('responseTimestamp');\r",
											"    pm.expect(jsonData).to.have.property('payload');\r",
											"    pm.expect(jsonData.payload).to.have.property('data');\r",
											"    pm.expect(jsonData.payload).not.to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data response\", function () {\r",
											"    pm.expect(jsonData.payload.data).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('version');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaTesters');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('betaFeature');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonCreatedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('bsonLastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('createdByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedDate');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('lastModifiedByUser');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isDeleted');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('key');\r",
											"    pm.expect(jsonData.payload.data).to.have.property('isActive');\r",
											"    pm.expect(jsonData.payload.data.createdByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser).to.have.property('id');\r",
											"    pm.expect(jsonData.payload.data.createdByUser.id).to.eql(422);\r",
											"    pm.expect(jsonData.payload.data.lastModifiedByUser.id).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Beta Feature Id is removed\", function () {\r",
											"    pm.expect(jsonData.payload.data.betaTesters.length).to.eql(0);\r",
											"    // pm.expect(jsonData.payload.data.betaTesters[0]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams\")));\r",
											"    // pm.expect(jsonData.payload.data.betaTesters[1]).to.eql(parseInt(pm.environment.get(\"acaUserIdTeams2\")));\r",
											"    pm.expect(jsonData.payload.data.betaFeature).to.eql(pm.environment.get(\"featureIdValue\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams2}}, {{acaUserIdTeams}}],\r\n        \"featureId\": \"{{featureIdValue}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								},
								"description": "Test Case Id: 310267\r\nAs a support user, I am able to remove beata feature id\r\n-> Verify status, exception & data value\r\n-> Verify response have key- status, exception, requestTimestamp, responseTimestamp, payload & payload have data\r\n-> Verify data should have various attributes\r\n   => id\r\n   => version\r\n   => betaTesters\r\n   => betaFeatures\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n   => lastModifiedDate\r\n   => lastModifiedByUser\r\n   => isDeleted\r\n   => key\r\n   => bsonCreatedDate\r\n   => bsonLastModifiedDate\r\n   => createdDate\r\n   => createdByUser\r\n-> Verify Beta Feature Id is removed\r\n"
							},
							"response": []
						},
						{
							"name": "As a support user, Report is generating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var i;\r",
											"var j;\r",
											"\r",
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"    pm.expect(jsonData).to.have.property(\"requestTimestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"responseTimestamp\");\r",
											"    pm.expect(jsonData.payload).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify data\", function() {\r",
											"    console.log(jsonData.payload.data.length);\r",
											"    for(i=0; i<jsonData.payload.data.length; i++) {\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property(\"clientPortalId\");\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property(\"clientName\");\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property(\"engagementId\");\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property(\"engagementTitle\");\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property(\"engagementDivision\");\r",
											"        pm.expect(jsonData.payload.data[i]).to.have.property(\"engagementAssetInfo\");\r",
											"        pm.expect(jsonData.payload.data[i].engagementAssetInfo).to.have.property(\"totalAssetsUploaded\");\r",
											"        pm.expect(jsonData.payload.data[i].engagementAssetInfo).to.have.property(\"totalDirectories\");\r",
											"        pm.expect(jsonData.payload.data[i].engagementAssetInfo).to.have.property(\"firstUploadedAssetDate\");\r",
											"        pm.expect(jsonData.payload.data[i].engagementAssetInfo).to.have.property(\"lastUploadedAssetDate\");\r",
											"        pm.expect(jsonData.payload.data[i].engagementAssetInfo).to.have.property(\"assetsByUser\");\r",
											"\r",
											"        if(jsonData.payload.data[i].engagementAssetInfo.assetsByUser.length!=0) {\r",
											"            console.log(jsonData.payload.data[i].engagementAssetInfo.assetsByUser.length);\r",
											"            for(j=0; j<jsonData.payload.data[i].engagementAssetInfo.assetsByUser.length; j++) {\r",
											"                pm.expect(jsonData.payload.data[i].engagementAssetInfo.assetsByUser[j]).to.have.property(\"userId\");\r",
											"                pm.expect(jsonData.payload.data[i].engagementAssetInfo.assetsByUser[j]).to.have.property(\"userName\");\r",
											"                pm.expect(jsonData.payload.data[i].engagementAssetInfo.assetsByUser[j]).to.have.property(\"totalAssets\");\r",
											"                pm.expect(jsonData.payload.data[i].engagementAssetInfo.assetsByUser[j]).to.have.property(\"lastUploadDate\");\r",
											"                pm.expect(jsonData.payload.data[i].engagementAssetInfo.assetsByUser[j]).to.have.property(\"isAcaEmployee\");\r",
											"                pm.expect(jsonData.payload.data[i].engagementAssetInfo.assetsByUser[j].isAcaEmployee).to.be.oneOf([true, false]);\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"08/15/2020 00:00 AM\",\r\n        \"ToDate\": \"08/24/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								},
								"description": "As a support user, I'm able to get all records for asset upload & download by aca users.\r\n"
							},
							"response": []
						},
						{
							"name": "Support User Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consultant User",
					"item": [
						{
							"name": "Login with Consultant User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{consultantACAUserName}}\",\r\n        \"password\": \"{{consultantACAUserPassword}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am getting 403 forbidden beta-features read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am getting 403 forbidden beta-features read\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								},
								"description": "As a consultant user, I am getting 403 forbidden beta-features read"
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am getting 403 forbidden for add feature id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am getting 403 forbidden for add feature id\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"pm.environment.set(\"featureIdValue\", \"Feature for TE \"+moment().format(\"YYYYMMDDhmmssa\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								},
								"description": "As a support user, As a consultant user, I am getting 403 forbidden for add feature id"
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am getting 403 forbidden for add beta-testers user id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am getting 403 forbidden for add beta-testers user id.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"pm.environment.set(\"betaUserId0\", parseInt(moment().format(\"mmss\")+\"0\"));\r",
											"pm.environment.set(\"betaUserId1\", parseInt(moment().format(\"mmss\")+\"1\"));\r",
											"pm.environment.set(\"betaUserId2\", parseInt(moment().format(\"mmss\")+\"2\"));\r",
											"pm.environment.set(\"betaUserId3\", parseInt(moment().format(\"mmss\")+\"3\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserId}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								},
								"description": "As a consultant user, As a consultant user, I am getting 403 forbidden for add beta-testers user id."
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am getting 403 forbidden for remove beta feature id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am getting 403 forbidden for remove beta feature id.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserId}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								},
								"description": "As a consultant user, I am getting 403 forbidden for remove beta feature id."
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am getting 403 forbidden for update beta feature status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am getting 403 forbidden for update beta feature status.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {  \r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}, {{acaUserId}}],\r\n\t\t\"featureId\" : \"{{featureIdValue}}\",\r\n        \"isActive\" : true\r\n      }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								},
								"description": "Test Case Id: https://testims.testrail.io/index.php?/cases/view/372076\r\nAs a support user, I am able to enable the status for users and feature id"
							},
							"response": []
						},
						{
							"name": "As a consultant user, I am getting 403 forbidden for remove beta tester users id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a consultant user, I am getting 403 forbidden for remove beta tester users id.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								},
								"description": "As a consultant user, I am getting 403 forbidden for remove beta tester users id."
							},
							"response": []
						},
						{
							"name": "As a consultant user, Report should not get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								},
								"description": "As a consultant user, I am not able to get all records for asset upload & download by aca users.\r\n    -> Verify that status code is 400\r\n"
							},
							"response": []
						},
						{
							"name": "Consultant User Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "Verify beta-features API return 403 for consultant user.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client User",
					"item": [
						{
							"name": "Login with Client User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", jsonData.payload.token);\r",
											"pm.environment.set(\"Status\", jsonData.status);\r",
											"\r",
											"pm.test(\"Verify that user is successfully login\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.status).to.eql(1);\r",
											"    pm.expect(jsonData.exception).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
											"    pm.expect(jsonData.payload.token).to.be.string;\r",
											"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{nonAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Beta-Features Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden beta-features read\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								},
								"description": "As a client user, I am getting 403 forbidden beta-features read"
							},
							"response": []
						},
						{
							"name": "Beta features, Add Feature Id value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden for add feature id\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"pm.environment.set(\"featureIdValue\", \"Feature for TE \"+moment().format(\"YYYYMMDDhmmssa\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"featureId\": \"{{featureIdValue}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								},
								"description": "As a client user, I am getting 403 forbidden for add feature id"
							},
							"response": []
						},
						{
							"name": "Beta Features, Add multiple beta-testers user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden for add beta-testers user id.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"pm.environment.set(\"betaUserId0\", parseInt(moment().format(\"mmss\")+\"0\"));\r",
											"pm.environment.set(\"betaUserId1\", parseInt(moment().format(\"mmss\")+\"1\"));\r",
											"pm.environment.set(\"betaUserId2\", parseInt(moment().format(\"mmss\")+\"2\"));\r",
											"pm.environment.set(\"betaUserId3\", parseInt(moment().format(\"mmss\")+\"3\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userIds\": [\r\n      {{betaUserId0}},\r\n      {{betaUserId1}},\r\n      {{betaUserId2}},\r\n      {{betaUserId3}}\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								},
								"description": "As a client user, As a consultant user, I am getting 403 forbidden for add beta-testers user id."
							},
							"response": []
						},
						{
							"name": "Beta-Features, Remove feature id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden for remove beta feature id.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"featureId\": \"{{featureIdValue}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								},
								"description": "As a client user, I am getting 403 forbidden for remove beta feature id."
							},
							"response": []
						},
						{
							"name": "Beta-Features, Remove Beta-Tester Users Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"As a client user, I am getting 403 forbidden for remove beta tester users id.\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userIds\": [\r\n      {{betaUserId0}},\r\n      {{betaUserId1}},\r\n      {{betaUserId2}},\r\n      {{betaUserId3}}\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								},
								"description": "As a client user, I am getting 403 forbidden for remove beta tester users id."
							},
							"response": []
						},
						{
							"name": "As a client user, Report should not get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								},
								"description": "As a client user, I am not able to get all records for asset upload & download by aca users.\r\n    -> Verify that status code is 400\r\n"
							},
							"response": []
						},
						{
							"name": "Client User Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/id/v1/authentication/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"id",
										"v1",
										"authentication",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "Verify beta-features API return 403 for client user.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "1. As a support user, I should be able to Add / Remove users from the list of 'TE Beta Testors'\r\n    -> As a support user, I am able to get all beta-testor users & featureId value if exists.\r\n    -> As a support user, I am able to add beta featureId value.\r\n    -> As a support user, I am able to add multiple beta-testor users id value\r\n    -> As a support user, I am able to remove beta featureId value.\r\n    -> As a support user, I am able to remove beta-testor users id value.\r\n\r\n2. Verify beta-features API return 403 for consultant user.\r\n3. Verify beta-features API return 403 for client user.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Security Check",
			"item": [
				{
					"name": "Missing JWT",
					"item": [
						{
							"name": "Verify that 'ACA Division Read' throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ACA Division Read' throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/AcaDivision/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"AcaDivision",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that upload file API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that upload file API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that download directory API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that download directory API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that download directory by id API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that download directory by id API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/download/{121}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"download",
										"{121}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that directory create API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory create API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory edit API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Move",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory Move API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Move Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Move Asset API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/asset/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"asset",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Move Assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Move Assets API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Delete Directory API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/{{121}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"{{121}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Delete Assets (file) API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SharedPointDirectories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that sharepointdirectories read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that TE Navigate API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that TE Navigate API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Navigation",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Navigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures Read API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures Read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Add Feature API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Add Feature API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Add Users API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Add Users API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Remove Feature API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Remove Feature API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Remove Users API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Remove Users API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Update status API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Update feature API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement create API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement update API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/update",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that add user in Engagement API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"adduser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Remove User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that remove user in Engagement API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Delete Engagement API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/Delete",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"Delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Remove ACA Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Remove ACA Services API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeacaservice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Asset- History API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-Upload v1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Asset- Service Upload API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-Upload v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Asset- Service Upload (v2) API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v2",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report File Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Report - fileexchange API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Asset Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Asset Upload API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Asset Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Asset Download API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client Profile Question Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Client Profile Read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client Profile Question Save",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Client Profile Save API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template Read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template Add API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/Add",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"Add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template CreateReport API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Read By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template Read By Id API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": {{createdTempId}},\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that fileexchange - sendtoaca API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								},
								"description": "As removed aca service module user, File Send To ACA API should give 403."
							},
							"response": []
						},
						{
							"name": "Notify Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that fileexchange - notifyclient API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"subject\": \"All File Changes Related Test\",\r\n        \"message\": \"<p>Pre-Test Messages</p>\",\r\n        \"assets\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"notifyclient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Users- readuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Users - readuser API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/readuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"readuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Users- read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Users - read API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/users/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"users",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Security Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getusersecurityroles API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"GetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Security Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that updateusersecurityroles API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"UpdateUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset User Security Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that resetusersecurityroles API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ResetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that createuser API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/createuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"createuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "SendActivationMail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that sendActivationEmail API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userId\": {{acaUserIdTeams}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/sendactivationemail",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"sendactivationemail"
									]
								}
							},
							"response": []
						},
						{
							"name": "ensureclientdataaftermoduleassignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that ensureclientdataaftermoduleassignment API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ensureclientdataaftermoduleassignment",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ensureclientdataaftermoduleassignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reference Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that allowedfileextensions API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ReferenceData/allowedfileextensions",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ReferenceData",
										"allowedfileextensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting - Get Ignore File Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getIgnoreFileTypes API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting - Save",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Setting- Save API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/setting/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"setting",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting - Getuploadfilelimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getUploadFileLimit API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that saveanswer api is throwing 401 if jwt token is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that saveanswer api is throwing 401 if jwt token is missing\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that getUserTenantDetails api is throwing 401 if jwt token is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getUserTenantDetails api is throwing 401 if jwt token is missing\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export report API is returning 401 if jwt token is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify export report API is returning 401 if jwt token is missing\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileName",
											"value": "ABCDDD3",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/ReportSQL.plugin.docx"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that create reviews API throws 401 if JWT is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that create reviews API throws 401 if JWT is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"JJAJJ\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-06-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [8389],\r\n        \"groupIds\": [\"a89801bb-175a-4223-a8ea-2cba4a18e24e\", \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"]\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [1913, 5163],\r\n        \"groupIds\": [\"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"]\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [1910, 8388],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [21],\r\n        \"groupIds\": [-1]\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-06-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-01T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get review details API is throwing 401 if jwt token is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get review details API is throwing 401 if jwt token is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/60ca3b550a2e035fcf737903",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"60ca3b550a2e035fcf737903"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get all reviews API is throwing 401 if jwt token is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get all reviews API is throwing 401 if jwt token is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify get history api is throwing 401 if jwt token is missing.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify get history api is throwing 401 if jwt token is missing.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is missing for get frequencies api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is missing for get frequencies api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is missing for get archival-providers api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is missing for get archival-providers api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is missing for get channel-of-communications api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is missing for get channel-of-communications api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 401 found for review edit if jwt token is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 401 found for review edit if jwt token is missing\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-17T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-23T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Incorrectly encoded JWT",
					"item": [
						{
							"name": "Verify that 'ACA Division Read' throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ACA Division Read' throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/AcaDivision/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"AcaDivision",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Asset Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that asset upload API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Asset Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that asset download API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that upload file API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that download directory API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Directory By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that download directory by id API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/download/{121}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"download",
										"{121}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory create API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory read API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory edit API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Move",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory move API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Move Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory asset move API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/asset/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"asset",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Directory Move Assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory assets move API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Directory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that directory delete API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/{{121}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"{{121}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Assets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that assets delete API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SharedPointDirectories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that sharepointdirectories API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "TE Navigation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that TE Navigation API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Navigation",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Navigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures-read API throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures-read API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Add Feature API throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Add Feature API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Add Users API throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Add Users API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Remove Feature API throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Remove Feature API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Remove Users API throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Remove Users API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Update feature API throws 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Update feature API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Read API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Create API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Update API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/update",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Add User in Engagement API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"adduser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Remove User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Remove User in Engagement API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Delete API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/Delete",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"Delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement Remove ACA Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement - Remove ACA Services API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeacaservice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Asset History API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-Upload v1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Asset Service Upload API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Engagement-Asset-Upload v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Engagement Asset Service (v2) Upload API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v2",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report File Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Report- fileexchange API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client Profile Question Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Client Profile Read API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Client Profile Question Save",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Client Profile Save API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template Read API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template Add API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/Add",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"Add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Create Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template createreport API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Template Read By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Template read by id API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": {{createdTempId}},\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "File Send To ACA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that file sendtoaca API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								},
								"description": "As removed aca service module user, File Send To ACA API should give 403."
							},
							"response": []
						},
						{
							"name": "Notify Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that notifyclient API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"notifyclient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Users- readuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Users- readUser API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/readuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"readuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Users- read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Users- read API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/users/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"users",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Security Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that GetUserSecurityRoles API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"GetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Security Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that UpdateUserSecurityRoles API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"UpdateUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset User Security Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that ResetUserSecurityRoles API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ResetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Users- createUser API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/createuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"createuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "SendActivationMail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that sendactivationemail API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/sendactivationemail",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"sendactivationemail"
									]
								}
							},
							"response": []
						},
						{
							"name": "ensureclientdataaftermoduleassignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that ensureclientdataaftermoduleassignment API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userId\": {{acaUserIdTeams}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ensureclientdataaftermoduleassignment",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ensureclientdataaftermoduleassignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reference Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that allowedfileextensions API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ReferenceData/allowedfileextensions",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ReferenceData",
										"allowedfileextensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting - Get Ignore File Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getIgnoreFileTypes API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting - Save",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Setting- Save API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/setting/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"setting",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting - Getuploadfilelimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that Setting- uploadfilelimit API throws 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that saveanswer api is throwing 401 if jwt token is encoded incorrectly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that saveanswer api is throwing 401 if jwt token is encoded incorrectly\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that getUserTenantDetails api is throwing 401 if jwt token is encoded incorrectly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getUserTenantDetails api is throwing 401 if jwt token is encoded incorrectly\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export report API is returning 401 if jwt token is encoded incorrectly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify export report API is returning 401 if jwt token is encoded incorrectly\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileName",
											"value": "ABCDDDM",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/ReportSQL.plugin.docx"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that create reviews API throws 401  if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that create reviews API throws 401  if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"JJAJJ\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-06-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [8389],\r\n        \"groupIds\": [\"a89801bb-175a-4223-a8ea-2cba4a18e24e\", \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"]\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [1913, 5163],\r\n        \"groupIds\": [\"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"]\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [1910, 8388],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [21],\r\n        \"groupIds\": [-1]\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-06-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-01T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get review details API is throwing 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get review details API is throwing 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/60ca3b550a2e035fcf737903",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"60ca3b550a2e035fcf737903"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get all reviews API is throwing 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get all reviews API is throwing 401 if JWT is encoded incorrectly.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify get history api is throwing 401 if JWT is encoded incorrectly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify get history api is throwing 401 if JWT is encoded incorrectly.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if JWT is encoded incorrectly for get frequencies api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if JWT is encoded incorrectly for get frequencies api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if JWT is encoded incorrectly for get archival-providers api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if JWT is encoded incorrectly for get archival-providers api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if JWT is encoded incorrectly for get channel-of-communications api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if JWT is encoded incorrectly for get channel-of-communications api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 401 found for review edit if jwt token is incorrectly encoded",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 401 found for review edit if jwt token is incorrectly encoded\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{incorrectJWTToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-17T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-23T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{incorrectJWTToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "JWT Missing User",
					"item": [
						{
							"name": "Verify that 'ACA Division Read' throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ACA Division Read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/AcaDivision/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"AcaDivision",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Upload' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Upload' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Download' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Download' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Upload file' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Upload file' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Download' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Download' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Download by id' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Download by id' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/download/{121}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"download",
										"{121}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Create' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Create' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Read' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Edit' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Edit' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Move By Id' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Move By Id' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/asset/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"asset",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Assets Move By Id' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Assets Move By Id' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Delete Directory' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Delete Assets' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/{{121}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"{{121}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Delete Assets' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 Unauthorized status found\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'sharedpointdirectories' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'sharedpointdirectories' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'TE Navigation' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'TE Navigation' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Navigation",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Navigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures-read' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures-read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures-AddFeature' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures-AddFeature' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures-AddUser' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures-AddUser' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures-RemoveFeature' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures-RemoveFeature' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures-RemoveUsers' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures-RemoveUsers' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Update feature API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Update feature API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Read' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Create' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Create' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Update' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Update' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/update",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'AddUser- Engagement' API throws 401 if user is missing in JWT token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'AddUser- Engagement' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"adduser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Remove User From Engagement' API throws 401 if user is missing in JWT token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Remove User From Engagement' API throws 401 if user is missing in JWT token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Delete' API throws 401 if user is missing in JWT token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Delete' API throws 401 if user is missing in JWT token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/Delete",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"Delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement removeacaservice' API throws 401 if user is missing in JWT token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement removeacaservice' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeacaservice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'EngagementAsset- history' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'EngagementAsset- history' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'EngagementAsset Service- upload' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'EngagementAsset Service- upload' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'EngagementAsset Service- upload (v2)' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'EngagementAsset Service- upload (v2)' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v2",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Report- fileexchange' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Report- fileexchange' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'ClientProfile- Read' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ClientProfile- Read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'ClientProfile- Save' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ClientProfile- Save' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template- Read' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template- Read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template- Add' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template- Add' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/Add",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"Add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template- createreport' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template- createreport' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template- read by id' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template- read by id' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": {{createdTempId}},\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'filesendtoaca' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'filesendtoaca' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								},
								"description": "As removed aca service module user, File Send To ACA API should give 403."
							},
							"response": []
						},
						{
							"name": "Verify that 'notifyclient' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'notifyclient' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"subject\": \"All File Changes Related Test\",\r\n        \"message\": \"<p>Pre-Test Messages</p>\",\r\n        \"assets\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"notifyclient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- readuser' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- readuser' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/readuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"readuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- Read' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- Read' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/users/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"users",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- GetUserSecurityRoles' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- GetUserSecurityRoles' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"GetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- UpdateUserSecurityRoles' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- UpdateUserSecurityRoles' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"UpdateUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- ResetUserSecurityRoles' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- ResetUserSecurityRoles' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ResetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- createuser' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- createuser' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/createuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"createuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- sendactivationemail' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- sendactivationemail' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userId\": {{acaUserIdTeams}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/sendactivationemail",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"sendactivationemail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- ensureclientdataaftermoduleassignment' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- ensureclientdataaftermoduleassignment' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ensureclientdataaftermoduleassignment",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ensureclientdataaftermoduleassignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'ReferenceData- allowedfileextensions' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ReferenceData- allowedfileextensions' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ReferenceData/allowedfileextensions",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ReferenceData",
										"allowedfileextensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting- getIgnoreFileTypes' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting- getIgnoreFileTypes' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting- save' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting- save' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/setting/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"setting",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting- getUploadFileLimit' API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting- getUploadFileLimit' API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that saveanswer api is throwing 401 if user information is missing in jwt token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that saveanswer api is throwing 401 if user information is missing in jwt token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that getUserTenantDetails api is throwing 401 if user information is missing in jwt token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getUserTenantDetails api is throwing 401 if user information is missing in jwt token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export report API is returning 401 if user information is missing in jwt token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify export report API is returning 401 if user information is missing in jwt token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileName",
											"value": "AKSDJSK",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/ReportSQL.plugin.docx"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that create reviews API throws 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that create reviews API throws 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"JJAJJ\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-06-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [8389],\r\n        \"groupIds\": [\"a89801bb-175a-4223-a8ea-2cba4a18e24e\", \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"]\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [1913, 5163],\r\n        \"groupIds\": [\"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"]\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [1910, 8388],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [21],\r\n        \"groupIds\": [-1]\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-06-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-01T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get review details API is throwing 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get review details API is throwing 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/60ca3b550a2e035fcf737903",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"60ca3b550a2e035fcf737903"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get all reviews API is throwing 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get all reviews API is throwing 401 if user is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify get history api is throwing 401 if user is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify get history api is throwing 401 if user is missing in JWT token.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if user details is missing in jwt token for get frequencies api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if user details is missing in jwt token for get frequencies api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if user details is missing in jwt token for get archival-providers api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if user details is missing in jwt token for get archival-providers api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is missing for get channel-of-communications api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is missing for get channel-of-communications api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 401 found for review edit if user info is missing in jwt token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 401 found for review edit if user info is missing in jwt token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-17T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-23T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{missingUserToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "JWT Missing Client",
					"item": [
						{
							"name": "Verify that 'ACA Division Read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ACA Division Read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/AcaDivision/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"AcaDivision",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Upload File' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Upload File' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Download Directory' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Download Directory' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Download Directory By Id' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Download Directory By Id' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/download/{121}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"download",
										"{121}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Create' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Create' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Edit' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Edit' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move Asset' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move Asset' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/asset/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"asset",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move Assets' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move Assets' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Delete Directory' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Delete Directory' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/{{121}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"{{121}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Delete Assets' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Delete Assets' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'sharedpointdirectories' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'sharedpointdirectories' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'TE Navigation' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'TE Navigation' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Navigation",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Navigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Beta-Features Read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Beta-Features Read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Beta-Features Add Features' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Beta-Features Add Features' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Beta-Features Add Users' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Beta-Features Add Users' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Beta-Features Remove Feature' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Beta-Features Remove Feature' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Beta-Features Remove User' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Beta-Features Remove User' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Update feature API throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Update feature API throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Create' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Create' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Update' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Update' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/update",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Add User' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Add User' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"adduser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Remove User' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Remove User' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Delete' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Delete' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/Delete",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"Delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Remove ACA Service' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Remove ACA Service' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeacaservice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement-Asset-History' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement-Asset-History' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement-Asset-Upload v1' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement-Asset-Upload v1' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement-Asset-Upload v2' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement-Asset-Upload v2' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v2",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Report FileExchange' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Report FileExchange' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Upload' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Upload' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Download' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Download' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Client Profile Question Read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Client Profile Question Read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Client Profile Question Save' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Client Profile Question Save' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Add' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Add' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/Add",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"Add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Create Report' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Create Report' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Read By Id' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Read By Id' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": {{createdTempId}},\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'File Send To ACA' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'File Send To ACA' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								},
								"description": "As removed aca service module user, File Send To ACA API should give 403."
							},
							"response": []
						},
						{
							"name": "Verify that 'Notify Client' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Notify Client' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"subject\": \"All File Changes Related Test\",\r\n        \"message\": \"<p>Pre-Test Messages</p>\",\r\n        \"assets\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"notifyclient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- readuser' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- readuser' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/readuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"readuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- read' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- read' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/users/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"users",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- GetUserSecurityRoles' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- GetUserSecurityRoles' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"GetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- UpdateUserSecurityRoles' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- UpdateUserSecurityRoles' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"UpdateUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- ResetUserSecurityRoles' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- ResetUserSecurityRoles' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ResetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- CreateUser' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- CreateUser' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/createuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"createuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- SendActivationMail' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- SendActivationMail' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userId\": {{acaUserIdTeams}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/sendactivationemail",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"sendactivationemail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- ensureclientdataaftermoduleassignment' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- ensureclientdataaftermoduleassignment' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ensureclientdataaftermoduleassignment",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ensureclientdataaftermoduleassignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'ReferenceData- allowedfileextensions' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ReferenceData- allowedfileextensions' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ReferenceData/allowedfileextensions",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ReferenceData",
										"allowedfileextensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting - Get Ignore File Types' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting - Get Ignore File Types' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting - Save' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting - Save' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/setting/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"setting",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting - Getuploadfilelimit' throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting - Getuploadfilelimit' throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that saveanswer api is throwing 401 if client info is missing in jwt token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that saveanswer api is throwing 401 if client info is missing in jwt token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that getUserTenantDetails api is throwing 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getUserTenantDetails api is throwing 401 if client details is missing in JWT token.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export report API is returning 401 if client details is missing in jwt token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify export report API is returning 401 if client details is missing in jwt token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileName",
											"value": "MKJKJK",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/ReportSQL.plugin.docx"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that create reviews API throws 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that create reviews API throws 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"JJAJJ\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-06-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [8389],\r\n        \"groupIds\": [\"a89801bb-175a-4223-a8ea-2cba4a18e24e\", \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"]\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [1913, 5163],\r\n        \"groupIds\": [\"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"]\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [1910, 8388],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [21],\r\n        \"groupIds\": [-1]\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-06-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-01T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get review details API is throwing 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get review details API is throwing 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/60ca3b550a2e035fcf737903",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"60ca3b550a2e035fcf737903"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get all reviews API is throwing 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get all reviews API is throwing 401 if client details is missing in JWT token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify get history api is throwing 401 if client details is missing in JWT token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify get history api is throwing 401 if client details is missing in JWT token.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if client details is missing in jwt token for get frequencies api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if client details is missing in jwt token for get frequencies api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if client details is missing in jwt token for get archival-providers api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if client details is missing in jwt token for get archival-providers api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if client details is missing in jwt token for get channel-of-communications api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if client details is missing in jwt token for get channel-of-communications api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 401 found for review edit if client info is missing in jwt token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 401 found for review edit if client info is missing in jwt token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{missingClientToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-17T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-23T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{missingClientToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "JWT User doesn't have Module Access",
					"item": [
						{
							"name": "PreCondition- Remove ACA Service Module For User",
							"item": [
								{
									"name": "Support User Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"username\": \"{{UserName}}\",\n        \"password\": \"{{password}}\",\n        \"stayLoggedIn\": false,\n        \"actor\": \"eyJyZWZlcnJlciI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MC4wLjM5ODcuMTQ5IFNhZmFyaS81MzcuMzYifQ==\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/Login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"Login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable ACA Service Module For ACA User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that user is successfully disable modules.\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data.length).to.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{acaUserIdTeams2}},\r\n        \"users\": false,\r\n        \"groups\": false,\r\n        \"affiliates\": false,\r\n        \"ecPreset\": false,\r\n        \"documents\": false,\r\n        \"messages\": false,\r\n        \"tenantProfileManagement\": false,\r\n        \"reportPublisher\": false,\r\n        \"userDefinedFieldManagement\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/user/adminpermission/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"user",
												"adminpermission",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Verify 403 Forbidden for Removed ACA Service Module User",
							"item": [
								{
									"name": "Login With Removed ACA Service Module User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{secondAcaUserForTeams}}\",\r\n        \"password\": \"{{password}}\",\r\n        \"stayLoggedIn\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": {{clientIdForTeams}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for TE Navigation API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for TE Navigation API if ACA service module is not given.\", function() {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Navigation",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Navigation"
											]
										},
										"description": "Verify that TE navigation menu is forbidden for removed aca services module."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Engagement Read' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Engagement Read' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										},
										"description": "As removed aca service module user, Read Engagement API should give 403."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'ClientProfile Read' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'ClientProfile Read' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"clientProfile",
												"read"
											]
										},
										"description": "As a Removed ACA Service module user, I'm not able read client profile question."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'ClientProfile Save' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'ClientProfile Save' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"clientFormalName\": \"{{clientNameForTeams}}\",\r\n        \"clientShortName\": \"{{$randomAbbreviation}}\",\r\n        \"clientShortNamePossessive\": \"CS {{$randomInt}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"ClientProfile",
												"save"
											]
										},
										"description": "As a Removed ACA Service module user, I am not able to save client profile question. 403 Forbidden status should get."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Template Read' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Template Read' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Template/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Template",
												"read"
											]
										},
										"description": "As a Removed ACA Service module user, template read api should return with 403 status."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Template sharedpointdirectories' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Template sharedpointdirectories' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"sharepointdirectories"
											]
										},
										"description": "As a Removed ACA Service module user, sharedpointdirectories api should return with 403 status."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Template createreport' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Template createreport' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"templateId\": 1,\r\n        \"destinationFolderId\": \"\",\r\n        \"reportName\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/template/createreport",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"template",
												"createreport"
											]
										},
										"description": "As a Removed ACA Service module user, create report api should return with 403 status."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Directory Read' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Directory Read' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"parentDirectoryId\": {{rootDirectoryId}},\r\n        \"initialize\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"read"
											]
										},
										"description": "As removed aca service module user, Directory Read API should give 403."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Directory Create' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Directory Create' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"FT-{{$randomInt}}\",\r\n    \"parentDirectoryId\": {{rootDirectoryId}},\r\n    \"directoryType\": 4,\r\n    \"directoryTypeIdentifier\": \"2\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/create",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"create"
											]
										},
										"description": "As removed aca service module user, Create Directory API should give 403."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Upload File' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Upload File' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{firstFolderId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "/upload.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/directory/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"directory",
												"upload"
											]
										},
										"description": "As removed aca service module user, Upload File API should give 403."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'fileexchange- sendtoaca' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'fileexchange- sendtoaca' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"fileexchange",
												"sendtoaca"
											]
										},
										"description": "As removed aca service module user, File Send To ACA API should give 403."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Add User In Engagement' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Add User In Engagement' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"engagementId\": {{engagementId}},\r\n    \"acaLeadUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"acaConsultantUsersToAdd\": [\r\n      {{acaUserIdTeams2}}, {{acaUserId}}\r\n    ],\r\n    \"clientLeadUsersToAdd\": [\r\n      0\r\n    ],\r\n    \"clientUsersToAdd\": [\r\n      {{nonACAUserId}}\r\n    ],\r\n    \"acaLeadUsersToRemove\": [\r\n      0\r\n    ],\r\n    \"clientLeadUsersToRemove\": [\r\n      0\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"adduser"
											]
										},
										"description": "As removed aca service module user, Add User To Engagement API should give 403."
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Asset Upload' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Asset Upload' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./import-data/upload1.txt"
												},
												{
													"key": "parentDirectoryId",
													"value": "{{rootDirectoryId}}",
													"type": "text"
												},
												{
													"key": "engagementId",
													"value": "{{engagementId}}",
													"type": "text"
												},
												{
													"key": "fileFullPath",
													"value": "./upload1.txt",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Asset/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Asset",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Asset Download' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Asset Download' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"fileIdentifiers\": [\r\n      0\r\n    ],\r\n    \"ids\": [\r\n      0\r\n    ],\r\n    \"name\": 0,\r\n    \"folderId\": 0\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Asset/download",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Asset",
												"download"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Engagement-Assets-v1-Service-Upload' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Engagement-Assets-v1-Service-Upload' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"engagementId\": {{engagementId}},\r\n        \"divisions\": [\r\n            1\r\n        ],\r\n        \"assetsToAdd\": [\r\n            0\r\n        ],\r\n        \"assetsToRemove\": [\r\n            0\r\n        ],\r\n        \"requestFolderId\": 0,\r\n        \"duplicateAssets\": [\r\n            0\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"EngagementAsset",
												"service",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Engagement-Assets-v2-Service-Upload' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Engagement-Assets-v2-Service-Upload' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"assetsToAdd\": [\r\n      0\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v2",
												"EngagementAsset",
												"service",
												"upload"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Engagement-Asset-History' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Engagement-Asset-History' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"EngagementAsset",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Enable Teams Notifications' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Enable Teams Notifications' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"userSetting\": {\r\n            \"engagementId\": {{engagementId}},\r\n            \"userId\": {{acaUserIdTeams}},\r\n            \"disableTeamsNotification\": false\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/setting/save",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"setting",
												"save"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'NotifyClient' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'NotifyClient' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"subject\": \"All File Changes Related Test\",\r\n        \"message\": \"<p>Pre-Test Messages</p>\",\r\n        \"assets\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"fileexchange",
												"notifyclient"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Users- ReadUser' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Users- ReadUser' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"email\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/readuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"readuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Users- CreateUser(FileExchange)' API if ACA service module is not given.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var todaydate=new Date();\r",
													"var random='c'+todaydate.getDate()+\"\"+todaydate.getMonth()+\"\"+todaydate.getFullYear()+\"\"+todaydate.getHours()+\"\"+todaydate.getMinutes()+\"\"+todaydate.getSeconds();\r",
													"\r",
													"pm.environment.set('userNameA', 'UserN'+random+'@360logica.com');\r",
													"pm.environment.set('firstNameA', 'UserN');\r",
													"pm.environment.set('lastNameA', random);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Users- CreateUser(FileExchange)' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"username\": \"{{userNameA}}\",\r\n        \"firstName\": \"{{firstNameA}}\",\r\n        \"lastName\": \"{{lastNameA}}\",\r\n        \"displayName\": \"{{firstNameA}} {{lastNameA}}\",\r\n        \"email\": \"{{emailId}}\",\r\n        \"isAcaEmployee\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Users/createuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Users",
												"createuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Engagement removeacaservice' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Engagement removeacaservice' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"userIds\": [\r\n            {{acaUserId}},\r\n            {{nonACAUserId}},\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"engagementId\": {{engagementId}}\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"removeacaservice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Engagement removeuser' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Engagement removeuser' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"engagementId\": {{engagementId}},\r\n    \"usersToRemove\": [\r\n      {{acaUserId}},\r\n      {{nonACAUserId}}\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Engagement",
												"removeuser"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 Forbidden status found for 'Setting getUploadFileLimit' API if ACA service module is not given.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 Forbidden status found for 'Setting getUploadFileLimit' API if ACA service module is not given.\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payload\": {\r\n    \"engagementId\": {{engagementId}},\r\n    \"usersToRemove\": [\r\n      {{acaUserId}},\r\n      {{nonACAUserId}}\r\n    ]\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"Setting",
												"getUploadFileLimit"
											]
										}
									},
									"response": []
								},
								{
									"name": "As a Removed ACA Service module, I am getting 403 Forbidden for create review API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"As a Removed ACA Service module, I am getting 403 Forbidden for create review API\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"reviewName\": \"77\",\r\n    \"reviewType\": 1,\r\n    \"reviewStartDate\": \"\",\r\n    \"reviewEndDate\": \"\",\r\n    \"interviewStartDate\": \"\",\r\n    \"interviewEndDate\": \"\",\r\n    \"sections\": [\r\n        {\r\n            \"section\": 1,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 2,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 3,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 4,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 5,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 6,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 7,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 8,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 9,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 10,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 11,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        },\r\n        {\r\n            \"section\": 12,\r\n            \"userIds\": [],\r\n            \"groupIds\": []\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"rw",
												"v1",
												"odata",
												"reviews"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 found if aca services modules is removed for get frequencies api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 found if aca services modules is removed for get frequencies api\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"referencedata",
												"frequencies"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 found if aca services modules is removed for get archival-providers api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 found if aca services modules is removed for get archival-providers api\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"referencedata",
												"archival-providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify 403 found if aca services modules is removed for get channel-of-communications api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify 403 found if aca services modules is removed for get channel-of-communications api\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"referencedata",
												"channel-of-communications"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "JWT Client Access",
					"item": [
						{
							"name": "JWT Other Client",
							"item": [
								{
									"name": "Support User Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"pm.environment.set(\"Status\", jsonData.status);\r",
													"\r",
													"pm.test(\"Verify that user is successfully login\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that token value is string and not equal to null\", function () {\r",
													"    pm.expect(jsonData.payload.token).to.be.string;\r",
													"    pm.expect(jsonData.payload.token).not.to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"username\": \"{{UserName}}\",\n        \"password\": \"{{password}}\",\n        \"stayLoggedIn\": false,\n        \"actor\": \"eyJyZWZlcnJlciI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MC4wLjM5ODcuMTQ5IFNhZmFyaS81MzcuMzYifQ==\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/authentication/Login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"authentication",
												"Login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"otherClientId\", jsonData.payload.data[0].clientId);\r",
													"pm.environment.set(\"otherClientName\", jsonData.payload.data[0].name);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify tenant is created successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"description\": \"Description Details to client {{timestamp}}\",\n        \"notes\": \"\",\n        \"totangoId\": null,\n        \"allowedIPAddresses\": null,\n        \"defaultTimezone\": \"Africa/Asmara\",\n        \"defaultCurrencyCodeId\": 4,\n        \"name\": \"Del_API_Auto_Tenant_Other{{timestamp}}\",\n        \"urlSlugName\": \"{{$randomInt}}{{timestamp}}\",\n        \"domainsToAdd\": [],\n        \"productFeaturesToAdd\": [],\n        \"productsToAdd\": [\n            6,\n            1\n        ],\n        \"partnerEntityId\": null,\n        \"isTwoFactorRequired\": false,\n        \"salesForceAccountID\": \"SOOPOPOP{{$timestamp}}\",\n        \"ssoDefinitions\": []\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/admin/client/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"admin",
												"client",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Select Other Tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"token\", jsonData.payload.token);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys of response\", function () {\r",
													"    pm.expect(jsonData.payload).to.have.property('tokenSubject');\r",
													"    pm.expect(jsonData.payload).to.have.property('createdTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('expiryTime');\r",
													"    pm.expect(jsonData.payload).to.have.property('isMobile');\r",
													"    pm.expect(jsonData.payload).to.have.property('applicationState');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify that client is selected successfully\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payload\": {\n        \"clientId\": 40147//{{otherClientId}}\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/id/v1/Authentication/ClientSelection",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"id",
												"v1",
												"Authentication",
												"ClientSelection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify that engagement created in first tenant is not getting in second tenant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Verify that engagement created in first tenant is not getting in second tenant\r",
													"pm.test(\"Verify that engagement created in first tenant is not getting in second tenant\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(1);\r",
													"    pm.expect(jsonData.exception).to.eql(null);\r",
													"    pm.expect(jsonData.payload.data.length).to.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{otherClientId}}\r\n            ]\r\n        },\r\n        \"sortOption\": {\r\n            \"column\": \"Name\",\r\n            \"direction\": 1\r\n        },\r\n        \"pagingOption\": {\r\n            \"offset\": 0,\r\n            \"limit\": 50\r\n        }\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/te/v1/engagement/read",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"te",
												"v1",
												"engagement",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify that review created first tenant is not getting in second tenant.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that review created first tenant is not getting in second tenant.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
											"host": [
												"{{teUrl}}"
											],
											"path": [
												"api",
												"rw",
												"v1",
												"odata",
												"reviews"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Expired JWT",
					"item": [
						{
							"name": "Verify that 'ACA Division Read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ACA Division Read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/AcaDivision/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"AcaDivision",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Upload File' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Upload File' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Download' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Download' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Download By Id' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Download By Id' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{firstFolderId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "/upload.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/download/{121}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"download",
										"{121}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Create' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Create' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Edit' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Edit' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/edit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"edit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move Asset' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move Asset' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/asset/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"asset",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Directory Move Assets' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Directory Move Assets' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"directoryName\": \"liosnfsd\",\r\n    \"directoryPaths\": [\r\n      \"sdfklsdj\"\r\n    ],\r\n    \"parentDirectoryId\": 0,\r\n    \"directoryType\": 0,\r\n    \"directoryTypeIdentifier\": \"string\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{121}}/assets/move",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{121}}",
										"assets",
										"move"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Delete Directory' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Delete Directory' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Directory/{{121}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Directory",
										"{{121}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Delete Assets' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Delete Assets' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/{{rootDirectoryId}}/assets?id={{secondFileId}}&id={{fileId}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"{{rootDirectoryId}}",
										"assets"
									],
									"query": [
										{
											"key": "id",
											"value": "{{secondFileId}}"
										},
										{
											"key": "id",
											"value": "{{fileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'SharedPointDirectories' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'SharedPointDirectories' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"folderId\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/directory/sharepointdirectories",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"directory",
										"sharepointdirectories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'TE Navigation' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'TE Navigation' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Navigation",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Navigation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures- Read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures- Read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures- AddFeature' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 unauthorized status found\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures- AddUsers' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures- AddUsers' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/add-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"add-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures- Remove Feature' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures- Remove Feature' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'BetaFeatures- Remove Users' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'BetaFeatures- Remove Users' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/remove-users",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"remove-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that BetaFeatures- Update feature API throws 401 if jwt token is expired.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that BetaFeatures- Update feature API throws 401 if jwt token is expired.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"UserIds\" : [{{acaUserIdTeams}}, {{acaUserIdTeams2}}],\r\n        \"featureId\": \"{{featureIdValue}}\",\r\n        \"isActive\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/BetaFeatures/update-feature",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"BetaFeatures",
										"update-feature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Create' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Create' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/create",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Update' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Update' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/engagement/update",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"engagement",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Add User' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Add User' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/adduser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"adduser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Remove User' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Remove User' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Delete' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Delete' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/Delete",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"Delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement Remove ACA Service' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement Remove ACA Service' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/removeacaservice",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"removeacaservice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement-Asset-History' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement-Asset-History' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement-Asset-Upload v1' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement-Asset-Upload v1' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Engagement-Asset-Upload v2' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Engagement-Asset-Upload v2' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"ids\": [\r\n            {{engagementId}}\r\n        ],\r\n        \"filterOption\": {\r\n            \"clientIds\": [\r\n                {{clientIdForTeams}}\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v2/EngagementAsset/service/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v2",
										"EngagementAsset",
										"service",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Report fileexchange' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Report fileexchange' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"FromDate\": \"06/01/2020 00:00 AM\",\r\n        \"ToDate\": \"11/01/2020 00:00 AM\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Report/fileexchange",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Report",
										"fileexchange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Upload' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Upload' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/upload",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Asset Download' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Asset Download' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload1.txt"
										},
										{
											"key": "parentDirectoryId",
											"value": "{{rootDirectoryId}}",
											"type": "text"
										},
										{
											"key": "engagementId",
											"value": "{{engagementId}}",
											"type": "text"
										},
										{
											"key": "fileFullPath",
											"value": "./upload1.txt",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Asset/download",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Asset",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Client Profile Read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Client Profile Read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/clientProfile/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"clientProfile",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Client Profile Save' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Client Profile Save' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ClientProfile/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ClientProfile",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Add' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Add' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/Add",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"Add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template createreport' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template createreport' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/template/createreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"template",
										"createreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Template Read By Id' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Template Read By Id' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": {{createdTempId}},\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Fileexchange- filesendtoaca' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Fileexchange- filesendtoaca' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"assetsToAdd\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/sendtoaca",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"sendtoaca"
									]
								},
								"description": "As removed aca service module user, File Send To ACA API should give 403."
							},
							"response": []
						},
						{
							"name": "Verify that 'Fileexchange- notifyclient' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Fileexchange- notifyclient' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"users\": [\r\n            {{nonUserAcaId}}\r\n        ],\r\n        \"subject\": \"All File Changes Related Test\",\r\n        \"message\": \"<p>Pre-Test Messages</p>\",\r\n        \"assets\": [\r\n            {{fileId}}\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/fileexchange/notifyclient",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"fileexchange",
										"notifyclient"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- readuser' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- readuser' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/readuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"readuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- read' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- read' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/users/read",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"users",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- GetUserSecurityRoles' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- GetUserSecurityRoles' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/GetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"GetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- UpdateUserSecurityRoles' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- UpdateUserSecurityRoles' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/UpdateUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"UpdateUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- ResetUserSecurityRoles' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- ResetUserSecurityRoles' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ResetUserSecurityRoles",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ResetUserSecurityRoles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- CreateUser' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- CreateUser' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/createuser",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"createuser"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- sendactivationmail' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- sendactivationmail' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"userId\": {{acaUserIdTeams}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/sendactivationemail",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"sendactivationemail"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Users- ensureclientdataaftermoduleassignment' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Users- ensureclientdataaftermoduleassignment' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"userId\": {{nonUserAcaId}},\r\n        \"clientPortalId\": {{clientIdForTeams}},\r\n        \"isAcaEmployee\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Users/ensureclientdataaftermoduleassignment",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Users",
										"ensureclientdataaftermoduleassignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'ReferenceData- allowedfileextensions' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'ReferenceData- allowedfileextensions' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/ReferenceData/allowedfileextensions",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"ReferenceData",
										"allowedfileextensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting - Get Ignore File Types' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting - Get Ignore File Types' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getIgnoreFileTypes",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getIgnoreFileTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting - Save' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting - Save' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/setting/save",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"setting",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 'Setting - Getuploadfilelimit' API throws 401 if user is using expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 'Setting - Getuploadfilelimit' API throws 401 if user is using expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"filterOption\": {\r\n            \"userName\": \"{{consultantACAUserName}}\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Setting/getUploadFileLimit",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Setting",
										"getUploadFileLimit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that saveanswer api is throwing 401 if jwt token is expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that saveanswer api is throwing 401 if jwt token is expired\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payload\": {\r\n    \"templateId\": 1,\r\n    \"reportIdentifier\": \"{{reportIdentifier}}\",\r\n    \"engagementId\": {{engagementId}},\r\n    \"responses\": [\r\n      {\r\n        \"questionId\": 14,\r\n        \"answer\": \"Report testing force {{$randomJobDescriptor}}\"\r\n      }\r\n    ]\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/saveanswers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"saveanswers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that getUserTenantDetails api is throwing 401 if JWT token is expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that getUserTenantDetails api is throwing 401 if JWT token is expired\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Engagement/getUserTenantDetails/{{acaUserIdTeams}}",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Engagement",
										"getUserTenantDetails",
										"{{acaUserIdTeams}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify export report API is returning 401 if jwt token is expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify export report API is returning 401 if jwt token is expired\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fileName",
											"value": "AGHGGHH",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
											"type": "text"
										},
										{
											"key": "reportIdentifier",
											"value": "{{reportIdentifier}}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "./import-data/upload.txt"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/Template/exportreport",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"Template",
										"exportreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that create reviews API throws 401 for expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that create reviews API throws 401 for expired token\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reviewName\": \"JJAJJ\",\r\n  \"reviewType\": 1,\r\n  \"annualInfo\": {\r\n    \"interviewStartDate\": \"2021-06-20T00:00:00\",\r\n    \"interviewEndDate\": \"2021-06-01T00:00:00\",\r\n    \"sections\": [\r\n      {\r\n        \"section\": 1,\r\n        \"userIds\": [8389],\r\n        \"groupIds\": [\"a89801bb-175a-4223-a8ea-2cba4a18e24e\", \"a4e22971-1bb0-4e55-aab1-527e1aaedd68\"]\r\n      },\r\n      {\r\n        \"section\": 2,\r\n        \"userIds\": [1913, 5163],\r\n        \"groupIds\": [\"a3250296-ed10-49db-a9ec-75ff9abe6b0d\"]\r\n      },\r\n      {\r\n        \"section\": 3,\r\n        \"userIds\": [1910, 8388],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 4,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 5,\r\n        \"userIds\": [21],\r\n        \"groupIds\": [-1]\r\n      },\r\n      {\r\n        \"section\": 6,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 7,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 8,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 9,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 10,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 11,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      },\r\n      {\r\n        \"section\": 12,\r\n        \"userIds\": [],\r\n        \"groupIds\": []\r\n      }\r\n    ],\r\n    \"reviewStartDate\": \"2021-06-24T00:00:00\",\r\n    \"reviewEndDate\": \"2021-06-01T00:00:00\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get review details API is throwing 401 for expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get review details API is throwing 401 for expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/60ca3b550a2e035fcf737903",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"60ca3b550a2e035fcf737903"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that get all reviews API is throwing 401 for expired token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that get all reviews API is throwing 401 for expired token.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify get history api is throwing 401 if jwt token is expired.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify get history api is throwing 401 if jwt token is expired.\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews/{{revId}}/history",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews",
										"{{revId}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is expired for get frequencies api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is expired for get frequencies api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/frequencies",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"frequencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is expired for get archival-providers api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is expired for get archival-providers api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/archival-providers",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"archival-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 401 found if jwt token is expired for get channel-of-communications api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify 401 found if jwt token is expired for get channel-of-communications api\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/te/v1/referencedata/channel-of-communications",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"te",
										"v1",
										"referencedata",
										"channel-of-communications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify that 401 found for review edit if jwt token is expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that 401 found for review edit if jwt token is expired\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{chRevId}}\",\r\n    \"reviewName\": \"123\",\r\n    \"reviewType\": 3,\r\n    \"chrysalisInfo\": {\r\n        \"roles\": [\r\n            {\r\n                \"role\": 1,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 2,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams}}\r\n                ]\r\n            },\r\n            {\r\n                \"role\": 3,\r\n                \"userIds\": [\r\n                    {{acaUserIdTeams2}}\r\n                ]\r\n            }\r\n        ],\r\n        \"reviewStartDate\": \"2021-07-17T00:00:00\",\r\n        \"reviewEndDate\": \"2021-07-23T00:00:00\",\r\n        \"interviewDates\": [\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\",\r\n            \"2021-07-22T00:00:00\",\r\n            \"2021-07-23T00:00:00\",\r\n            \"2021-07-24T00:00:00\"\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{teUrl}}/api/rw/v1/odata/reviews",
									"host": [
										"{{teUrl}}"
									],
									"path": [
										"api",
										"rw",
										"v1",
										"odata",
										"reviews"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{expiredUserToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"postman.setEnvironmentVariable(\"timestamp\", moment().format(\"YYYY-MM-DD_hh-mm-ss-A\"));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}